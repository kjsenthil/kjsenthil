name: "Deploy to staging"
on:
  pull_request:
    branches:
      - master
    types:
      - closed
jobs:
# ToDo: deploy infra
#   apply_staging_terraform:
#     name: "Deploy Staging environment"
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./terraform
#     env:
#       ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
#       ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
#       ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
#       ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
#       TF_INPUT: false

#     steps:
#       - uses: actions/checkout@v2

#       - name: Setup Terraform (Azure)
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 0.12.20

#       - name: Terraform Init (Azure)
#         run: terraform init

#       - name: Terraform Apply (Azure)
#         run: terraform apply -auto-approve
 
  deploy_staging:
    name: "Deploy Staging website"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hybrid-frontend

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      #Get Branch Name on a Pull request, lowercase, 7 char long without dashes
      - name: Get Branch Name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF})"
          echo "##[set-output name=branch-subset;]$(echo ${GITHUB_HEAD_REF} | tr -d ' -' | awk '{print tolower(substr( $0, 1, 7))}')"
        id: extract_branch_name

      - name: Login to Azure
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Delete PR storage account (PR Closed)
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $StorageAccountRG = "digital-hybrid-resources"
            $StorageAccountName = "dighybpr${{ steps.extract_branch_name.outputs.branch-subset }}"
            if($(Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -Name $StorageAccountName -ErrorAction Ignore) -eq $null) {
              Write-Host "$StorageAccountName Storage account doesnt exists, no action required"

            } else {
              Write-Host "Confirm $StorageAccountName storage account exists, deleting PR environment"
              Remove-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName -Force
            }
          azPSVersion: "latest"
      
      - name: Deploy PR environment to staging
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $StorageAccountRG = "digital-hybrid-resources"
            $PrStorageAccountName = "dighybpr${{ steps.extract_branch_name.outputs.branch-subset }}"
            $StagingStorageAccountName = "digitalhybridmanual"
            $ArtifactStorageAccountName = "digitalhybridartifact"
            $gitsha = "${{github.sha}}"
            $WebContainerName = '$web'

            function Create-AzureStorageContainer {
              [cmdletbinding()]
              param(
                  $StorageAccountName,
                  $StorageAccountRG,
                  $ContainerName
              )
              $StorageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
              $Context  = $StorageAccount.Context
              if($null -eq $(Get-AzStorageContainer -Name $ContainerName -Context $Context -ErrorAction Ignore)) {
                Write-Host "Storage container doesnt exists, creating container named $ContainerName"
                New-AzStorageContainer -Context $Context -Name $ContainerName
              } else {
              Write-Host "Storage container exists"
              }
            }

            function Copy-FilesToAzureStorageContainer {
              [cmdletbinding()]
              param(
                  $SrcStorageAccountName,
                  $SrcStorageAccountRG,
                  $SrcContainerName,
                  $DstStorageAccountName,
                  $DstStorageAccountRG,
                  $DstContainerName,
                  $Force
              )
              $SrcStorageAccount = Get-AzStorageAccount -ResourceGroupName $SrcStorageAccountRG -AccountName $SrcStorageAccountName
              $SrcContext  = $SrcStorageAccount.Context

              $DstStorageAccount = Get-AzStorageAccount -ResourceGroupName $DstStorageAccountRG -AccountName $DstStorageAccountName
              $DstContext  = $DstStorageAccount.Context

              $blobs = Get-AzStorageBlob -Context $SrcContext -Container $SrcContainerName
              $blobs | Start-AzStorageBlobCopy -Context $SrcContext -DestContext $DstContext -DestContainer $DstContainerName -Force:$Force 
            }

            function Remove-AzureStorageBlobs {
              [cmdletbinding()]
              param(
                  $StorageAccountName,
                  $StorageAccountRG,
                  $ContainerName
              )
              $StorageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
              $Context  = $StorageAccount.Context
              if($null -eq $(Get-AzStorageContainer -Name $ContainerName -Context $Context -ErrorAction Ignore)) {
                  Write-Host "[Error] Storage container doesnt exists"
              } else {
                  Write-Host "Storage container exists, deleting all Files in container $ContainerName"
                  (Get-AzStorageBlob -Container $ContainerName -Context $Context | Remove-AzStorageBlob -Force) 1> $null
              }
            }

            if($null -eq $(Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -Name $PrStorageAccountName -ErrorAction Ignore)) {
              Write-Host "[Finish] $PrStorageAccountName Storage account doesnt exists, no action required"

            } else {
              Write-Host "[1] Confirm $PrStorageAccountName storage account exists, deploying PR environment to artifact storage account $ArtifactStorageAccountName"
              
              Write-Host "[2] Create container named $gitsha in artifact storage account $ArtifactStorageAccountName"
              Create-AzureStorageContainer -StorageAccountName $ArtifactStorageAccountName -StorageAccountRG $StorageAccountRG -ContainerName $gitsha

              Write-Host "[3] Deploying PR Gatsby build to artifact storage account $ArtifactStorageAccountName"
              Copy-FilesToAzureStorageContainer -SrcStorageAccountName $PrStorageAccountName -SrcStorageAccountRG $StorageAccountRG -SrcContainerName $WebContainerName -DstStorageAccountName $ArtifactStorageAccountName -DstStorageAccountRG $StorageAccountRG -DstContainerName $gitsha

              Write-Host "[4] flushing storage account name $StagingStorageAccountName"
              Remove-AzureStorageBlobs -StorageAccountName $StagingStorageAccountName -StorageAccountRG $StorageAccountRG -ContainerName $WebContainerName

              Write-Host "[5] Deploying Gatsby build to staging storage account $StagingStorageAccountName"
              Copy-FilesToAzureStorageContainer -SrcStorageAccountName $ArtifactStorageAccountName -SrcStorageAccountRG $StorageAccountRG -SrcContainerName $gitsha -DstStorageAccountName $StagingStorageAccountName -DstStorageAccountRG $StorageAccountRG -DstContainerName $WebContainerName

              Write-Host "[6] Deleting PR environment"
              Remove-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $PrStorageAccountName -Force

              $StagingStorageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StagingStorageAccountName
              Write-Host "[FINISH]  Staging Website deployed - see below url"
              Write-Output $StagingStorageAccount.PrimaryEndpoints.Web
            }
          azPSVersion: "latest"