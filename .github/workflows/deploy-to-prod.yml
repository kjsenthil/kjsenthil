name: "Deploy to production"

on:
  push:
    branches:
      - master

jobs:
  build_cache:
    name: "Build caches"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set cache metadata"
        id: cache-meta
        run: |
          echo "::set-output name=key::${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
          echo "::set-output name=yarn-path::$(yarn config get cacheFolder)"
          echo "::set-output name=modules-path::**/node_modules"

      - name: "Check for existing yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Check for existing node modules cache"
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install missing dependencies"
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' || steps.node-modules-cache.outputs.cache-hit != 'true'}}
        run: yarn install

    outputs:
      key: ${{ steps.cache-meta.outputs.key }}
      yarn-path: ${{ steps.cache-meta.outputs.yarn-path }}
      modules-path: ${{ steps.cache-meta.outputs.modules-path }}

  # Deploys Staging backend (Terraform).
  deploy_staging_terraform:
    name: "Deploy staging backend"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/env/staging

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init

      - name: "Terraform Apply"
        run: terraform apply -auto-approve

      # Outputs
      - name: "Get Terraform Outputs"
        id: tf-outputs
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .endpoints.value )
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )

    outputs:
      frontend_storage_account_name: ${{ steps.tf-outputs.outputs.frontend-storage-account-name }}
      resource_group_name: ${{ steps.tf-outputs.outputs.resource-group-name }}
      api_endpoints: ${{ steps.tf-outputs.outputs.api-endpoints }}
      website_endpoint: ${{ steps.tf-outputs.outputs.website-endpoint }}

  # Deploys the frontend in the staging environment.
  deploy_staging_frontend:
    name: "Deploy staging front end"
    needs: [build_cache, deploy_staging_terraform]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.staging
          echo 'API_ENDPOINTS=${{ needs.deploy_staging_terraform.outputs.api_endpoints }}' >> .env.staging
          echo "XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk" >> .env.staging
          cat .env.staging

      - name: "Gatsby Build"
        run: GATSBY_ACTIVE_ENV=staging yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # TODO check timings of uploads and parelellise if necessary
      - name: "Upload build artifacts"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name "staging-${{github.sha}}" --account-name "digitalhybridartifact"
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "staging-${{github.sha}}" --account-name "digitalhybridartifact"

      - name: "Deploy Gatsby static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name '$web' --account-name "${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }}"
            az storage blob delete-batch --account-name "${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "\$web" --account-name "${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }}"

  end_to_end_test_staging:
    name: "E2E test (Staging)"
    runs-on: ubuntu-latest
    needs: [build_cache, deploy_staging_terraform, deploy_staging_frontend]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install Cypress binary"
        run: npx cypress install

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.staging
          echo 'API_ENDPOINTS=${{ needs.deploy_staging_terraform.outputs.api_endpoints }}' >> .env.staging
          echo "XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk" >> .env.staging
          cat .env.staging

      - name: "E2E test"
        run: CYPRESS_BASE_URL="${{ needs.deploy_staging_terraform.outputs.website_endpoint }}" yarn frontend cy:run

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Upload test artifacts"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name "testing-${{github.sha}}" --account-name "digitalhybridartifact"
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/cypress/videos -d "testing-${{github.sha}}" --account-name "digitalhybridartifact" --destination-path "tests/videos/"

  # Deploy Production backend (Terraform)
  deploy_production_terraform:
    name: "Deploy production backend"
    needs: [end_to_end_test_staging]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/env/prod
    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        id: init
        run: terraform init

      - name: "Terraform Apply"
        id: apply
        run: terraform apply -auto-approve

      # Outputs
      - name: "Get Terraform Outputs"
        id: tf-outputs
        working-directory: ./terraform/env/prod
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .endpoints.value )
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )
          echo ::set-output name=storybook-web-endpoint::$( terraform output -json | jq -r .storybook_web_endpoint.value )
          echo ::set-output name=storybook-storage-account-name::$( terraform output -json | jq -r .storybook_storage_account_name.value )

    outputs:
      frontend_storage_account_name: ${{ steps.tf-outputs.outputs.frontend-storage-account-name }}
      resource_group_name: ${{ steps.tf-outputs.outputs.resource-group-name }}
      api_endpoints: ${{ steps.tf-outputs.outputs.api-endpoints }}
      website_endpoint: ${{ steps.tf-outputs.outputs.website-endpoint }}
      storybook_storage_account_name: ${{ steps.tf-outputs.outputs.storybook-storage-account-name }}
      storybook_web_endpoint: ${{ steps.tf-outputs.outputs.storybook-web-endpoint }}

  # Deploys the frontend in the production environment.
  deploy_production_frontend:
    name: "Deploy production front end"
    needs: [build_cache, deploy_production_terraform]

    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.production
          echo 'API_ENDPOINTS=${{ needs.deploy_production_terraform.outputs.api_endpoints }}' >> .env.production
          echo "XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk" >> .env.production
          cat .env.production

      - name: "Gatsby build"
        run: GATSBY_ACTIVE_ENV=production yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # TODO check timings of uploads and parelellise if necessary
      - name: "Upload build artifacts"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name "prod-${{github.sha}}" --account-name "digitalhybridartifact"
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "prod-${{github.sha}}" --account-name "digitalhybridartifact"

      - name: "Deploy frontend as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name '$web' --account-name "${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }}"
            az storage blob delete-batch --account-name "${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "\$web" --account-name "${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }}"

  # Deploys storybook.
  deploy_storybook_pr:
    name: "Deploy Storybook"
    needs: [build_cache, deploy_production_terraform]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Build Storybook"
        run: yarn frontend build-storybook -o "./storybook-static"

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Storybook as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name '$web' --account-name "${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }}"
            az storage blob delete-batch --account-name "${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/storybook-static -d "\$web" --account-name "${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }}"

  output_website_urls:
    name: "Output website urls"
    needs: [deploy_staging_terraform, deploy_production_terraform]
    runs-on: ubuntu-latest
    steps:
      - name: "Get website urls"
        shell: bash
        run: |
          echo "Staging website endpoint: ${{ needs.deploy_staging_terraform.outputs.website_endpoint }}"
          echo "Production website endpoint: ${{ needs.deploy_production_terraform.outputs.website_endpoint }}"
          echo "Production Storybook endpoint: ${{ needs.deploy_production_terraform.outputs.storybook_web_endpoint }}"

  post-to-slack:
    if: always()
    name: "Post to Slack"
    needs:
      [
        build_cache,
        deploy_staging_terraform,
        deploy_staging_frontend,
        end_to_end_test_staging,
        deploy_production_terraform,
        deploy_production_frontend,
        deploy_storybook_pr,
        output_website_urls,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: "Get current timestamp"
        id: get-current-timestamp
        run: |
          echo ::set-output name=current-timestamp::$( date +%s )

      - name: "Post to slack"
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PROD }}
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                "color": '${{ needs.build_cache.result }}' === 'success' && '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' && '${{ needs.end_to_end_test_staging.result }}' === 'success' && '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' && '${{ needs.deploy_storybook_pr.result }}' === 'success' && '${{ needs.output_website_urls.result }}' === 'success' ? '#009933' : '#cc0000',
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": '${{ needs.build_cache.result }}' === 'success' && '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' && '${{ needs.end_to_end_test_staging.result }}' === 'success' && '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' && '${{ needs.deploy_storybook_pr.result }}' === 'success' && '${{ needs.output_website_urls.result }}' === 'success' ? 'Deployment Success :rocket:' : 'Deployment Failed :rotating_light:',
                      "emoji": true
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "*Workflow Name* : ${{ github.workflow }}"
                      }
                    ]
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "*Deployment initiated by*:"
                      },
                      {
                        "type": "image",
                        "image_url": "https://github.com/${{ github.actor }}.png?size=40",
                        "alt_text": "Authors Avatar"
                      },
                      {
                        "type": "plain_text",
                        "text": "${{ github.actor }}",
                        "emoji": true
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.build_cache.result }}' === 'success' && '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' && '${{ needs.end_to_end_test_staging.result }}' === 'success' && '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' && '${{ needs.deploy_storybook_pr.result }}' === 'success' && '${{ needs.output_website_urls.result }}' === 'success' ? ':heavy-check-mark:   *Deployment Status*: Success' : ':heavy-cross-mark:   *Deployment Status*: Failure'
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Job Conclusions for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.build_cache.result }}' === 'success' ? ':heavy-check-mark:   Build Cache' : '${{ needs.build_cache.result }}' === 'failure' ? ':heavy-cross-mark:   Build Cache' : ':heavy-minus-sign:   Build Cache'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_staging_terraform.result }}' === 'success' ? ':heavy-check-mark:   Terraform - Deploy Staging Environment' : '${{ needs.deploy_staging_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Terraform - Deploy Staging Environment' : ':heavy-minus-sign:   Terraform - Deploy Staging Environment'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_staging_frontend.result }}' === 'success' ? ':heavy-check-mark:   Deploy Staging Frontend' : '${{ needs.deploy_staging_frontend.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Staging Frontend' : ':heavy-minus-sign:   Deploy Staging Frontend'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.end_to_end_test_staging.result }}' === 'success' ? ':heavy-check-mark:   E2E Tests - Staging' : '${{ needs.end_to_end_test_staging.result }}' === 'failure' ? ':heavy-cross-mark:   E2E Tests - Staging' : ':heavy-minus-sign:   E2E Tests - Staging'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_production_terraform.result }}' === 'success' ? ':heavy-check-mark:   Terraform - Deploy Production Environment' : '${{ needs.deploy_production_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Terraform - Deploy Production Environment' : ':heavy-minus-sign:   Terraform - Deploy Production Environment'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_production_frontend.result }}' === 'success' ? ':heavy-check-mark:   Deploy Production Frontend' : '${{ needs.deploy_production_frontend.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Production Frontend' : ':heavy-minus-sign:   Deploy Production Frontend'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_storybook_pr.result }}' === 'success' ? ':heavy-check-mark:   Build &amp; Deploy Storybook - Production' : '${{ needs.deploy_storybook_pr.result }}' === 'failure' ? ':heavy-cross-mark:   Build &amp; Deploy Storybook - Production' : ':heavy-minus-sign:   Build &amp; Deploy Storybook - Production'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.output_website_urls.result }}' === 'success' ? ':heavy-check-mark:   Output Website URLs' : '${{ needs.output_website_urls.result }}' === 'failure' ? ':heavy-cross-mark:   Output Website URLs' : ':heavy-minus-sign:   Output Website URLs'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ job.status }}' === 'success' ? ':heavy-check-mark:   Post to Slack' : '${{ job.status }}' === 'failure' ? ':heavy-cross-mark:   Post to Slack' : ':heavy-minus-sign:   Post to Slack'
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Useful link for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":hammer_and_wrench:   Workflow run for this deployment"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Workflow run",
                        "emoji": true
                      },
                      "value": "Link to this run instance",
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Storybook and Website links for Staging and Production environments.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":jigsaw:   Storybook"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View storybook",
                        "emoji": true
                      },
                      "value": "Link to Storybook website",
                      "url": '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_storybook_pr.result }}' === 'success' ? '${{ needs.deploy_production_terraform.outputs.storybook_web_endpoint }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":globe_with_meridians:   Digital-Hybrid website - Staging"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View website - Staging",
                        "emoji": true
                      },
                      "value": "Link to DH website - Staging",
                      "url": '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' ? '${{ needs.deploy_staging_terraform.outputs.website_endpoint }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":globe_with_meridians:   Digital-Hybrid website - Production"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View website - Production",
                        "emoji": true
                      },
                      "value": "Link to DH website - Production",
                      "url": ''${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' ? '${{ needs.deploy_production_terraform.outputs.website_endpoint }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": ":airplane_arriving: *<!date^${{ steps.get-current-timestamp.outputs.current-timestamp }}^Posted on {date_long} at {time_secs}|Date and Time of this message when it was posted.>*"
                      }
                    ]
                  }
                ]
              }]
            }
