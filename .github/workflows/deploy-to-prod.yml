name: "Deploy to production"

on:
  push:
    branches:
      - master

concurrency: prod_deployment

jobs:
  build_cache:
    name: "Build caches"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set cache metadata"
        id: cache-meta
        run: |
          echo "::set-output name=key::${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
          echo "::set-output name=yarn-path::$(yarn config get cacheFolder)"
          echo "::set-output name=modules-path::**/node_modules"

      - name: "Check for existing yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Check for existing node modules cache"
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install missing dependencies"
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' || steps.node-modules-cache.outputs.cache-hit != 'true'}}
        run: yarn install

    outputs:
      key: ${{ steps.cache-meta.outputs.key }}
      yarn-path: ${{ steps.cache-meta.outputs.yarn-path }}
      modules-path: ${{ steps.cache-meta.outputs.modules-path }}

  package_function_apps:
    name: "Package Function Apps"
    needs: [build_cache]
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create function app zips"
        run: yarn all:fa:build:zip

      - name: "Collect function apps"
        run: |
          mkdir -p ./function-app-zips
          yarn all:fa:copy-zip

      - name: "Upload function app packages"
        uses: actions/upload-artifact@v2
        with:
          name: function-app-zips
          path: function-app-zips
          if-no-files-found: error

    outputs:
      artifact-name: "function-app-zips"

  # Deploys Staging backend (Terraform).
  deploy_staging_rg_terraform:
    name: "Deploy Staging Resource Group"
    environment: staging
    runs-on: ubuntu-latest
    concurrency: staging_rg_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: rg-plan
        run: terraform plan -var-file="./var-files/staging.tfvars" -no-color

      - name: "Terraform Apply"
        run: terraform apply -var-file="./var-files/staging.tfvars" -auto-approve

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )
          echo ::set-output name=artifact-storage-account-name::$( terraform output -json | jq -r .artifact_storage_account_name.value )
          echo ::set-output name=artifact-container-name::$( terraform output -json | jq -r .artifact_container_name.value )
          echo ::set-output name=test-artifacts-container-name::$( terraform output -json | jq -r .test_artifacts_container_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}
      artifact_storage_account_name: ${{ steps.set-terraform-outputs.outputs.artifact-storage-account-name }}
      artifact_container_name: ${{ steps.set-terraform-outputs.outputs.artifact-container-name }}
      test_artifacts_container_name: ${{ steps.set-terraform-outputs.outputs.test-artifacts-container-name }}

  # Deploys terraform APIM.
  deploy_staging_apim_terraform:
    name: "Deploy Staging APIM"
    environment: staging
    needs: [deploy_staging_rg_terraform]
    runs-on: ubuntu-latest
    concurrency: staging_apim_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        run: terraform plan -no-color -var-file="./var-files/staging.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_staging_rg_terraform.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}

      - name: "Terraform Apply"
        run: terraform apply -auto-approve -var-file="./var-files/staging.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_staging_rg_terraform.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-vnet-name::$( terraform output -json | jq -r .apim_vnet_name.value )
          echo ::set-output name=apim-subnet-name::$( terraform output -json | jq -r .apim_subnet_name.value )
          echo ::set-output name=cdn-profile-name::$( terraform output -json | jq -r .cdn_profile_name.value )
          echo ::set-output name=app-insights-name::$( terraform output -json | jq -r .app_insights_name.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_vnet_name: ${{ steps.set-terraform-outputs.outputs.apim-vnet-name }}
      apim_subnet_name: ${{ steps.set-terraform-outputs.outputs.apim-subnet-name }}
      cdn_profile_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-name }}
      app_insights_name: ${{ steps.set-terraform-outputs.outputs.app-insights-name }}

  # Deploys terraform PR contents.
  deploy_staging_terraform:
    name: "Deploy Staging Infrastructure."
    environment: staging
    needs:
      [
        deploy_staging_rg_terraform,
        deploy_staging_apim_terraform,
        package_function_apps,
      ]
    runs-on: ubuntu-latest
    concurrency: staging_infra_terraform_deployment

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        id: pr-init
        working-directory: ./terraform/infra
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Terraform Validate"
        id: pr-validate
        working-directory: ./terraform/infra
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        working-directory: ./terraform/infra
        run: terraform plan -var-file="./var-files/staging.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_staging_rg_terraform.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.deploy_staging_apim_terraform.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.deploy_staging_apim_terraform.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.deploy_staging_apim_terraform.outputs.apim_subnet_name }}
          TF_VAR_cdn_profile_name: ${{ needs.deploy_staging_apim_terraform.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.deploy_staging_apim_terraform.outputs.app_insights_name }}

      - name: "Terraform Apply"
        id: pr-apply
        working-directory: ./terraform/infra
        run: terraform apply -var-file="./var-files/staging.tfvars" -auto-approve
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_staging_rg_terraform.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.deploy_staging_apim_terraform.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.deploy_staging_apim_terraform.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.deploy_staging_apim_terraform.outputs.apim_subnet_name }}
          TF_VAR_cdn_profile_name: ${{ needs.deploy_staging_apim_terraform.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.deploy_staging_apim_terraform.outputs.app_insights_name }}

      - name: "Get Terraform Outputs"
        id: get-terraform-outputs
        working-directory: ./terraform/infra
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )
          echo ::set-output name=storybook-web-endpoint::$( terraform output -json | jq -r .storybook_web_endpoint.value )
          echo ::set-output name=storybook-storage-account-name::$( terraform output -json | jq -r .storybook_storage_account_name.value )
          echo ::set-output name=api-base-url::$( terraform output -json | jq -r .api_base_url.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .api_endpoints.value )
          echo ::set-output name=myaccounts-home-url::$( terraform output -json | jq -r .myaccounts_home_url.value )
          echo ::set-output name=gtm-env-auth::$( terraform output -json | jq -r .gtm_env_auth.value )
          echo ::set-output name=gtm-env-preview::$( terraform output -json | jq -r .gtm_env_preview.value )

    outputs:
      frontend_storage_account_name: ${{ steps.get-terraform-outputs.outputs.frontend-storage-account-name }}
      website_endpoint: ${{ steps.get-terraform-outputs.outputs.website-endpoint }}
      storybook_storage_account_name: ${{ steps.get-terraform-outputs.outputs.storybook-storage-account-name }}
      storybook_web_endpoint: ${{ steps.get-terraform-outputs.outputs.storybook-web-endpoint }}
      api_base_url: ${{ steps.get-terraform-outputs.outputs.api-base-url }}
      api_endpoints: ${{ steps.get-terraform-outputs.outputs.api-endpoints }}
      myaccounts_home_url: ${{ steps.get-terraform-outputs.outputs.myaccounts-home-url }}
      gtm_env_auth: ${{ steps.get-terraform-outputs.outputs.gtm-env-auth }}
      gtm_env_preview: ${{ steps.get-terraform-outputs.outputs.gtm-env-preview }}

  open_staging_storage_account_firewalls:
    name: "Open storage account firewalls for uploads"
    environment: staging
    runs-on: ubuntu-latest
    needs: [deploy_staging_rg_terraform, deploy_staging_terraform]
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Set default rule to allow to enable uploads"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update --resource-group ${{ needs.deploy_staging_rg_terraform.outputs.resource_group_name }} --name ${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }} --default-action Allow

  # Deploys the frontend in the staging environment.
  deploy_staging_frontend:
    name: "Deploy staging front end"
    environment: staging
    needs:
      [
        build_cache,
        deploy_staging_rg_terraform,
        deploy_staging_terraform,
        open_staging_storage_account_firewalls,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.staging
          echo 'API_ENDPOINTS=${{ needs.deploy_staging_terraform.outputs.api_endpoints }}' >> .env.staging
          echo 'API_BASE_URL=${{ needs.deploy_staging_terraform.outputs.api_base_url }}' >> .env.staging
          echo 'MYACCOUNTS_HOME_URL=${{ needs.deploy_staging_terraform.outputs.myaccounts_home_url }}' >> .env.staging
          echo 'GTM_AUTH=${{ needs.deploy_staging_terraform.outputs.gtm_env_auth }}' >> .env.staging
          echo 'GTM_PREVIEW=${{ needs.deploy_staging_terraform.outputs.gtm_env_preview }}' >> .env.staging
          cat .env.staging

      - name: "Gatsby Build"
        run: GATSBY_ACTIVE_ENV=staging yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # TODO check timings of uploads and parelellise if necessary
      - name: "Upload build artifacts"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
              --source $GITHUB_WORKSPACE/packages/hybrid-frontend/public \
              --destination "${{needs.deploy_staging_rg_terraform.outputs.artifact_container_name}}" \
              --account-name "${{needs.deploy_staging_rg_terraform.outputs.artifact_storage_account_name}}" \
              --destination-path "${{github.sha}}/"

      - name: "Deploy Gatsby static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name '$web' --account-name "${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }}"
            az storage blob delete-batch --account-name "${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "\$web" --account-name "${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }}"

  end_to_end_test_staging:
    name: "E2E test (Staging)"
    environment: staging
    runs-on: ubuntu-latest
    needs:
      [
        build_cache,
        deploy_staging_rg_terraform,
        deploy_staging_terraform,
        deploy_staging_frontend,
      ]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install Cypress binary"
        run: npx cypress install

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.staging
          echo 'API_ENDPOINTS=${{ needs.deploy_staging_terraform.outputs.api_endpoints }}' >> .env.staging
          echo 'API_BASE_URL=${{ needs.deploy_staging_terraform.outputs.api_base_url }}' >> .env.staging
          echo 'MYACCOUNTS_HOME_URL=${{ needs.deploy_staging_terraform.outputs.myaccounts_home_url }}' >> .env.staging
          echo 'GTM_AUTH=${{ needs.deploy_staging_terraform.outputs.gtm_env_auth }}' >> .env.staging
          echo 'GTM_PREVIEW=${{ needs.deploy_staging_terraform.outputs.gtm_env_preview }}' >> .env.staging
          cat .env.staging

      - name: "E2E test"
        run: CYPRESS_BASE_URL="${{ needs.deploy_staging_terraform.outputs.website_endpoint }}" yarn frontend cy:run

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Upload test artifacts"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
              --source $GITHUB_WORKSPACE/packages/hybrid-frontend/cypress/videos \
              --destination "${{needs.deploy_staging_rg_terraform.outputs.test_artifacts_container_name}}" \
              --account-name "${{needs.deploy_staging_rg_terraform.outputs.artifact_storage_account_name}}" \
              --destination-path "${{github.sha}}/videos/"

  wdio_ui_test:
    name: "wdio mock ui test"
    environment: development
    runs-on: ubuntu-latest
    needs:
      [
        build_cache,
        deploy_staging_rg_terraform,
        deploy_staging_terraform,
        open_staging_storage_account_firewalls,
        deploy_staging_frontend,
      ]
    strategy:
      matrix:
        browser: [chrome]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Update webdriver-manager"
        run: npx webdriver-manager update

      - name: "Wait for UI response"
        uses: emilioschepis/wait-for-endpoint@v1.0.2
        with:
          url: ${{ needs.deploy_staging_terraform.outputs.website_endpoint }}
          method: GET
          expected-status: 200
          timeout: 600000
          interval: 1000

      - name: "Run wdio mock UI tests"
        run: yarn test:mock-ui
        env:
          BROWSER: ${{matrix.browser}}
          URL: ${{ needs.deploy_staging_terraform.outputs.website_endpoint }}
          API_BASE_URL: ${{ needs.deploy_staging_terraform.outputs.api_base_url }}        
          STG_UI_USERNAME: ${{ secrets.DH_TEST_USER_NAME }}
          STG_UI_PASSWORD: ${{ secrets.DH_TEST_USER_PASSWORD }}

  close_staging_storage_account_firewalls:
    name: "Close storage account firewalls for uploads"
    environment: staging
    runs-on: ubuntu-latest
    needs:
      [
        deploy_staging_rg_terraform,
        deploy_staging_terraform,
        deploy_staging_frontend,
        end_to_end_test_staging,
      ]
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Set default rule to allow to enable uploads"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update --resource-group ${{ needs.deploy_staging_rg_terraform.outputs.resource_group_name }} --name ${{ needs.deploy_staging_terraform.outputs.frontend_storage_account_name }} --default-action Deny

  # Deploy Production backend (Terraform)
  deploy_production_rg_terraform:
    name: "Deploy prod Resource Group"
    environment: prod
    needs: "end_to_end_test_staging"
    runs-on: ubuntu-latest
    concurrency: prod_rg_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: rg-plan
        run: terraform plan -var-file="./var-files/prod.tfvars" -no-color

      - name: "Terraform Apply"
        run: terraform apply -var-file="./var-files/prod.tfvars" -auto-approve

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )
          echo ::set-output name=artifact-storage-account-name::$( terraform output -json | jq -r .artifact_storage_account_name.value )
          echo ::set-output name=artifact-container-name::$( terraform output -json | jq -r .artifact_container_name.value )
          echo ::set-output name=test-artifacts-container-name::$( terraform output -json | jq -r .test_artifacts_container_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}
      artifact_storage_account_name: ${{ steps.set-terraform-outputs.outputs.artifact-storage-account-name }}
      artifact_container_name: ${{ steps.set-terraform-outputs.outputs.artifact-container-name }}
      test_artifacts_container_name: ${{ steps.set-terraform-outputs.outputs.test-artifacts-container-name }}

  # Deploys terraform APIM.
  deploy_production_apim_terraform:
    name: "Deploy prod APIM"
    environment: prod
    needs: [end_to_end_test_staging, deploy_production_rg_terraform]
    runs-on: ubuntu-latest
    concurrency: prod_rg_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        run: terraform plan -no-color -var-file="./var-files/prod.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}

      - name: "Terraform Apply"
        run: terraform apply -auto-approve -var-file="./var-files/prod.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-vnet-name::$( terraform output -json | jq -r .apim_vnet_name.value )
          echo ::set-output name=apim-subnet-name::$( terraform output -json | jq -r .apim_subnet_name.value )
          echo ::set-output name=cdn-profile-name::$( terraform output -json | jq -r .cdn_profile_name.value )
          echo ::set-output name=app-insights-name::$( terraform output -json | jq -r .app_insights_name.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_vnet_name: ${{ steps.set-terraform-outputs.outputs.apim-vnet-name }}
      apim_subnet_name: ${{ steps.set-terraform-outputs.outputs.apim-subnet-name }}
      cdn_profile_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-name }}
      app_insights_name: ${{ steps.set-terraform-outputs.outputs.app-insights-name }}

  # Deploys terraform PR contents.
  deploy_production_terraform:
    name: "Deploy prod infrastructure."
    environment: prod
    needs:
      [
        deploy_production_rg_terraform,
        deploy_production_apim_terraform,
        end_to_end_test_staging,
        package_function_apps,
      ]
    runs-on: ubuntu-latest
    concurrency: prod_infra_terraform_deployment

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        id: pr-init
        working-directory: ./terraform/infra
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Terraform Validate"
        id: pr-validate
        working-directory: ./terraform/infra
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        working-directory: ./terraform/infra
        run: terraform plan -var-file="./var-files/prod.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.deploy_production_apim_terraform.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.deploy_production_apim_terraform.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.deploy_production_apim_terraform.outputs.apim_subnet_name }}
          TF_VAR_cdn_profile_name: ${{ needs.deploy_production_apim_terraform.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.deploy_production_apim_terraform.outputs.app_insights_name }}

      - name: "Terraform Apply"
        id: pr-apply
        working-directory: ./terraform/infra
        run: terraform apply -var-file="./var-files/prod.tfvars" -auto-approve
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.deploy_production_apim_terraform.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.deploy_production_apim_terraform.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.deploy_production_apim_terraform.outputs.apim_subnet_name }}
          TF_VAR_cdn_profile_name: ${{ needs.deploy_production_apim_terraform.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.deploy_production_apim_terraform.outputs.app_insights_name }}

      - name: "Get Terraform Outputs"
        id: get-terraform-outputs
        working-directory: ./terraform/infra
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )
          echo ::set-output name=storybook-web-endpoint::$( terraform output -json | jq -r .storybook_web_endpoint.value )
          echo ::set-output name=storybook-storage-account-name::$( terraform output -json | jq -r .storybook_storage_account_name.value )
          echo ::set-output name=api-base-url::$( terraform output -json | jq -r .api_base_url.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .api_endpoints.value )
          echo ::set-output name=myaccounts-home-url::$( terraform output -json | jq -r .myaccounts_home_url.value )
          echo ::set-output name=gtm-env-auth::$( terraform output -json | jq -r .gtm_env_auth.value )
          echo ::set-output name=gtm-env-preview::$( terraform output -json | jq -r .gtm_env_preview.value )

    outputs:
      frontend_storage_account_name: ${{ steps.get-terraform-outputs.outputs.frontend-storage-account-name }}
      website_endpoint: ${{ steps.get-terraform-outputs.outputs.website-endpoint }}
      storybook_storage_account_name: ${{ steps.get-terraform-outputs.outputs.storybook-storage-account-name }}
      storybook_web_endpoint: ${{ steps.get-terraform-outputs.outputs.storybook-web-endpoint }}
      api_base_url: ${{ steps.get-terraform-outputs.outputs.api-base-url }}
      api_endpoints: ${{ steps.get-terraform-outputs.outputs.api-endpoints }}
      myaccounts_home_url: ${{ steps.get-terraform-outputs.outputs.myaccounts-home-url }}
      gtm_env_auth: ${{ steps.get-terraform-outputs.outputs.gtm-env-auth }}
      gtm_env_preview: ${{ steps.get-terraform-outputs.outputs.gtm-env-preview }}

  open_prod_storage_account_firewalls:
    name: "Open storage account firewalls for uploads"
    environment: prod
    runs-on: ubuntu-latest
    needs: [deploy_production_rg_terraform, deploy_production_terraform]
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Set default rule to allow to enable uploads"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update --resource-group ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }} --name ${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }} --default-action Allow
            az storage account update --resource-group ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }} --name ${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }} --default-action Allow

  # Deploys the frontend in the production environment.
  deploy_production_frontend:
    name: "Deploy production front end"
    environment: prod
    needs:
      [
        build_cache,
        deploy_production_rg_terraform,
        deploy_production_terraform,
        open_prod_storage_account_firewalls,
      ]

    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.production
          echo 'API_ENDPOINTS=${{ needs.deploy_production_terraform.outputs.api_endpoints }}' >> .env.production
          echo 'API_BASE_URL=${{ needs.deploy_production_terraform.outputs.api_base_url }}' >> .env.production
          echo 'MYACCOUNTS_HOME_URL=${{ needs.deploy_production_terraform.outputs.myaccounts_home_url }}' >> .env.production
          echo 'GTM_AUTH=${{ needs.deploy_production_terraform.outputs.gtm_env_auth }}' >> .env.production
          echo 'GTM_PREVIEW=${{ needs.deploy_production_terraform.outputs.gtm_env_preview }}' >> .env.production
          cat .env.production

      - name: "Gatsby build"
        run: GATSBY_ACTIVE_ENV=production yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # TODO check timings of uploads and parelellise if necessary
      - name: "Upload build artifacts"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
              --source $GITHUB_WORKSPACE/packages/hybrid-frontend/public \
              --destination "${{needs.deploy_production_rg_terraform.outputs.artifact_container_name}}" \
              --account-name "${{needs.deploy_production_rg_terraform.outputs.artifact_storage_account_name}}" \
              --destination-path "${{github.sha}}/"

      - name: "Deploy frontend as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name '$web' --account-name "${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }}"
            az storage blob delete-batch --account-name "${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "\$web" --account-name "${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }}"

  # Deploys storybook.
  deploy_storybook_prod:
    name: "Deploy Storybook"
    environment: prod
    needs:
      [
        build_cache,
        deploy_production_rg_terraform,
        deploy_production_terraform,
        open_prod_storage_account_firewalls,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.production
          echo 'API_ENDPOINTS=${{ needs.deploy_production_terraform.outputs.api_endpoints }}' >> .env.production
          echo 'API_BASE_URL=${{ needs.deploy_production_terraform.outputs.api_base_url }}' >> .env.production
          echo 'MYACCOUNTS_HOME_URL=${{ needs.deploy_production_terraform.outputs.myaccounts_home_url }}' >> .env.production
          echo 'GTM_AUTH=${{ needs.deploy_production_terraform.outputs.gtm_env_auth }}' >> .env.production
          echo 'GTM_PREVIEW=${{ needs.deploy_production_terraform.outputs.gtm_env_preview }}' >> .env.production
          cat .env.production

      - name: "Build Storybook"
        run: GATSBY_ACTIVE_ENV=production yarn frontend build-storybook -o "./storybook-static"

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Storybook as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create --name '$web' --account-name "${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }}"
            az storage blob delete-batch --account-name "${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/storybook-static -d "\$web" --account-name "${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }}"

  close_prod_storage_account_firewalls:
    name: "Close storage account firewalls for uploads"
    environment: prod
    runs-on: ubuntu-latest
    needs:
      [
        deploy_production_rg_terraform,
        deploy_production_terraform,
        deploy_production_frontend,
        deploy_storybook_prod,
      ]
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Set default rule to allow to enable uploads"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update --resource-group ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }} --name ${{ needs.deploy_production_terraform.outputs.storybook_storage_account_name }} --default-action Deny
            az storage account update --resource-group ${{ needs.deploy_production_rg_terraform.outputs.resource_group_name }} --name ${{ needs.deploy_production_terraform.outputs.frontend_storage_account_name }} --default-action Deny

  output_website_urls:
    name: "Output website urls"
    needs: [deploy_staging_terraform, deploy_production_terraform]
    runs-on: ubuntu-latest
    steps:
      - name: "Get website urls"
        shell: bash
        run: |
          echo "Staging website endpoint: ${{ needs.deploy_staging_terraform.outputs.website_endpoint }}"
          echo "Production website endpoint: ${{ needs.deploy_production_terraform.outputs.website_endpoint }}"
          echo "Production Storybook endpoint: ${{ needs.deploy_production_terraform.outputs.storybook_web_endpoint }}"

  post-to-slack:
    name: "Post to Slack"
    if: always()
    environment: prod
    needs:
      [
        build_cache,
        package_function_apps,
        deploy_staging_rg_terraform,
        deploy_staging_apim_terraform,
        deploy_staging_terraform,
        deploy_staging_frontend,
        end_to_end_test_staging,
        deploy_production_rg_terraform,
        deploy_production_apim_terraform,
        deploy_production_terraform,
        deploy_production_frontend,
        deploy_storybook_prod,
        output_website_urls,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: "Get current timestamp"
        id: get-current-timestamp
        run: |
          echo ::set-output name=current-timestamp::$( date +%s )

      - name: "Post to slack"
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                "color": '${{ needs.build_cache.result }}' === 'success' && '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' && '${{ needs.end_to_end_test_staging.result }}' === 'success' && '${{ needs.wdio_ui_test.result }}' === 'success' && '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' && '${{ needs.deploy_storybook_prod.result }}' === 'success' && '${{ needs.output_website_urls.result }}' === 'success' ? '#009933' : '#cc0000',
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": '${{ needs.build_cache.result }}' === 'success' && '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' && '${{ needs.end_to_end_test_staging.result }}' === 'success' && '${{ needs.wdio_ui_test.result }}' === 'success' && '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' && '${{ needs.deploy_storybook_prod.result }}' === 'success' && '${{ needs.output_website_urls.result }}' === 'success' ? 'Deployment Success :rocket:' : 'Deployment Failed :rotating_light:',
                      "emoji": true
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "*Workflow Name* : ${{ github.workflow }}"
                      }
                    ]
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "*Deployment initiated by*:"
                      },
                      {
                        "type": "image",
                        "image_url": "https://github.com/${{ github.actor }}.png?size=40",
                        "alt_text": "Authors Avatar"
                      },
                      {
                        "type": "plain_text",
                        "text": "${{ github.actor }}",
                        "emoji": true
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.build_cache.result }}' === 'success' && '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' && '${{ needs.end_to_end_test_staging.result }}' === 'success' && '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' && '${{ needs.deploy_storybook_prod.result }}' === 'success' && '${{ needs.output_website_urls.result }}' === 'success' ? ':heavy-check-mark:   *Deployment Status*: Success' : ':heavy-cross-mark:   *Deployment Status*: Failure'
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Job Conclusions for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.build_cache.result }}' === 'success' ? ':heavy-check-mark:   Build Cache' : '${{ needs.build_cache.result }}' === 'failure' ? ':heavy-cross-mark:   Build Cache' : ':heavy-minus-sign:   Build Cache'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.package_function_apps.result }}' === 'success' ? ':heavy-check-mark:   Package Function Apps' : '${{ needs.package_function_apps.result }}' === 'failure' ? ':heavy-cross-mark:   Package Function Apps' : ':heavy-minus-sign:   Package Function Apps'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_staging_rg_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Staging Resource Group' : '${{ needs.deploy_staging_rg_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Staging Resource Group' : ':heavy-minus-sign:   Deploy Staging Resource Group'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_staging_apim_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Staging APIM' : '${{ needs.deploy_staging_apim_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Staging APIM' : ':heavy-minus-sign:   Deploy Staging APIM'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_staging_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Staging Infrastructure' : '${{ needs.deploy_staging_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Staging Infrastructure' : ':heavy-minus-sign:   Deploy Staging Infrastructure'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_staging_frontend.result }}' === 'success' ? ':heavy-check-mark:   Deploy Staging Frontend' : '${{ needs.deploy_staging_frontend.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Staging Frontend' : ':heavy-minus-sign:   Deploy Staging Frontend'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.end_to_end_test_staging.result }}' === 'success' ? ':heavy-check-mark:   E2E Tests - Staging' : '${{ needs.end_to_end_test_staging.result }}' === 'failure' ? ':heavy-cross-mark:   E2E Tests - Staging' : ':heavy-minus-sign:   E2E Tests - Staging'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.wdio_ui_test.result }}' === 'success' ? ':heavy-check-mark:   Wdio Mock Ui Tests - Staging' : '${{ needs.wdio_ui_test.result }}' === 'failure' ? ':heavy-cross-mark:   Wdio Mock Ui Tests - Staging' : ':heavy-minus-sign:   Wdio Mock Ui Tests - Staging'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_production_rg_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Production Resource Group' : '${{ needs.deploy_production_rg_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Production Resource Group' : ':heavy-minus-sign:   Deploy Production Resource Group'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_production_apim_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Production APIM' : '${{ needs.deploy_production_apim_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Production APIM' : ':heavy-minus-sign:   Deploy Production APIM'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_production_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Production Infrastructure' : '${{ needs.deploy_production_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Production Infrastructure' : ':heavy-minus-sign:   Deploy Production Infrastructure'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_production_frontend.result }}' === 'success' ? ':heavy-check-mark:   Deploy Production Frontend' : '${{ needs.deploy_production_frontend.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Production Frontend' : ':heavy-minus-sign:   Deploy Production Frontend'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_storybook_prod.result }}' === 'success' ? ':heavy-check-mark:   Build &amp; Deploy Storybook - Production' : '${{ needs.deploy_storybook_prod.result }}' === 'failure' ? ':heavy-cross-mark:   Build &amp; Deploy Storybook - Production' : ':heavy-minus-sign:   Build &amp; Deploy Storybook - Production'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.output_website_urls.result }}' === 'success' ? ':heavy-check-mark:   Output Website URLs' : '${{ needs.output_website_urls.result }}' === 'failure' ? ':heavy-cross-mark:   Output Website URLs' : ':heavy-minus-sign:   Output Website URLs'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ job.status }}' === 'success' ? ':heavy-check-mark:   Post to Slack' : '${{ job.status }}' === 'failure' ? ':heavy-cross-mark:   Post to Slack' : ':heavy-minus-sign:   Post to Slack'
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Useful link for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":hammer_and_wrench:   Workflow run for this deployment"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Workflow run",
                        "emoji": true
                      },
                      "value": "Link to this run instance",
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Storybook and Website links for Staging and Production environments.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":jigsaw:   Storybook"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View storybook",
                        "emoji": true
                      },
                      "value": "Link to Storybook website",
                      "url": '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_storybook_prod.result }}' === 'success' ? '${{ needs.deploy_production_terraform.outputs.storybook_web_endpoint }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":globe_with_meridians:   Digital-Hybrid website - Staging"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View website - Staging",
                        "emoji": true
                      },
                      "value": "Link to DH website - Staging",
                      "url": '${{ needs.deploy_staging_terraform.result }}' === 'success' && '${{ needs.deploy_staging_frontend.result }}' === 'success' ? '${{ needs.deploy_staging_terraform.outputs.website_endpoint }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":globe_with_meridians:   Digital-Hybrid website - Production"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View website - Production",
                        "emoji": true
                      },
                      "value": "Link to DH website - Production",
                      "url": '${{ needs.deploy_production_terraform.result }}' === 'success' && '${{ needs.deploy_production_frontend.result }}' === 'success' ? '${{ needs.deploy_production_terraform.outputs.website_endpoint }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": ":airplane_arriving: *<!date^${{ steps.get-current-timestamp.outputs.current-timestamp }}^Posted on {date_long} at {time_secs}|Date and Time of this message when it was posted.>*"
                      }
                    ]
                  }
                ]
              }]
            }
