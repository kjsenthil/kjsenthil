name: Deploy to Azure Static Web

on:
  pull_request:
    branches: [ master ]

jobs:
  deploy_pr:
    name: "Deploy PR environment"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hybrid-frontend

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      #Get Branch Name on a Pull request, lowercase, 7 char long without dashes
      - name: Get Branch Name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF})"
          echo "##[set-output name=branch-subset;]$(echo ${GITHUB_HEAD_REF} | tr -d ' -' | awk '{print tolower(substr( $0, 1, 7))}')"
        id: extract_branch_name

      - name: Login to Azure
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Install dependencies
        run: |
          npm install -g gatsby-cli
          yarn install --frozen-lockfile

      - name: Run unit tests
        run: yarn test

      - name: Run E2E UI tests
        run: |
          npx cypress install
          yarn test:e2e:ci

      - name: Build with Gatsby
        run: gatsby build

      - name: Setup storage account and deploy static website
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $StorageAccountRG = "digital-hybrid-resources"
            $StorageAccountName = "dighybpr${{ steps.extract_branch_name.outputs.branch-subset }}"
            $IndexDocumentName = "index.html"
            $ErrorDocumentName = "error.html"
            $sourceFileRootDirectory = "${{ github.workspace }}/hybrid-frontend/public"
            $ContainerName = "$web"
            $tags = @{"branch"="${{ steps.extract_branch_name.outputs.branch }}"}

            function Upload-FileToAzureStorageContainer {
              [cmdletbinding()]
              param(
                $StorageAccountName,
                $ContainerName,
                $StorageAccountRG,
                $sourceFileRootDirectory,
                $Force
              )

              $storageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
              $ctx = $storageAccount.Context
              $container = Get-AzStorageContainer -Name $ContainerName -Context $ctx

              $container.CloudBlobContainer.Uri.AbsoluteUri
              if ($container) {
                $filesToUpload = Get-ChildItem $sourceFileRootDirectory -Recurse -File

                foreach ($x in $filesToUpload) {
                  $targetPath = ($x.fullname.Substring($sourceFileRootDirectory.Length + 1)).Replace("\", "/")

                  Write-Verbose "Uploading $("\" + $x.fullname.Substring($sourceFileRootDirectory.Length + 1)) to $($container.CloudBlobContainer.Uri.AbsoluteUri + "/" + $targetPath)"
                  Set-AzStorageBlobContent -File $x.fullname -Container $container.Name -Blob $targetPath -Context $ctx -Properties @{"ContentType" = "text/html"} -Force:$Force | Out-Null
                }
              }
            }

            if($(Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -Name $StorageAccountName -ErrorAction Ignore) -eq $null) {
              Write-Host "Storage account doesnt exists, creating new storage account"
              New-AzStorageAccount -Location "West Europe" -Name $StorageAccountName -ResourceGroupName $StorageAccountRG -SkuName Standard_GRS -Kind StorageV2 -Tag $tags
              Write-Host "New storage account created, enabling static website hosting"
              $storageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
              $ctx = $storageAccount.Context
              Enable-AzStorageStaticWebsite -Context $ctx -IndexDocument $IndexDocumentName -ErrorDocument404Path $ErrorDocumentName
              Write-Host "Enabled static website hosting, deploying website"
              Upload-FileToAzureStorageContainer -StorageAccountName $StorageAccountName -ContainerName $ContainerName -StorageAccountRG $StorageAccountRG -sourceFileRootDirectory $sourceFileRootDirectory -Verbose
            } else {
              Write-Host "Storage account exists, deploying website"
              Upload-FileToAzureStorageContainer -StorageAccountName $StorageAccountName -ContainerName $ContainerName -StorageAccountRG $StorageAccountRG -sourceFileRootDirectory $sourceFileRootDirectory -Verbose
            }

            $storageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
            Write-Output $storageAccount.PrimaryEndpoints.Web
          azPSVersion: "latest"