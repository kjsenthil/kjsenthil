name: Deploy to Azure Static Web

on:
  pull_request:
    branches: [ master ]

jobs:
  deploy_pr:
    name: "Deploy PR environment"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hybrid-frontend

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      #Get Branch Name on a Pull request, lowercase, 7 char long without dashes
      - name: Get Branch Name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF})"
          echo "##[set-output name=branch-subset;]$(echo ${GITHUB_HEAD_REF} | tr -d ' -' | awk '{print tolower(substr( $0, 1, 7))}')"
        id: extract_branch_name

      - name: Login to Azure
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Install dependencies
        run: |
          npm install -g gatsby-cli
          yarn install --frozen-lockfile

      - name: Run linting and formatting
        run: |
          yarn format:check
          yarn lint

      - name: Run unit tests
        run: yarn test

      - name: Run E2E UI tests
        run: |
          npx cypress install
          yarn test:e2e:ci

      - name: Build with Gatsby
        run: gatsby build

      - name: Setup storage account and deploy static website
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $StorageAccountRG = "digital-hybrid-resources"
            $StorageAccountName = "dighybpr${{ steps.extract_branch_name.outputs.branch-subset }}"
            $IndexDocumentName = "index.html"
            $ErrorDocumentName = "error.html"
            $sourceFileRootDirectory = "${{ github.workspace }}/hybrid-frontend/public"
            $ContainerName = "$web"
            $tags = @{"branch"="${{ steps.extract_branch_name.outputs.branch }}"}
            function Upload-FileToAzureStorageContainer {
              [cmdletbinding()]
              param(
                $StorageAccountName,
                $ContainerName,
                $StorageAccountRG,
                $sourceFileRootDirectory,
                $Force
              )

              $storageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
              $ctx = $storageAccount.Context
              $container = Get-AzStorageContainer -Name $ContainerName -Context $ctx

              $container.CloudBlobContainer.Uri.AbsoluteUri
              if ($container) {
                $filesToUpload = Get-ChildItem $sourceFileRootDirectory -Recurse -File

                foreach ($x in $filesToUpload) {
                  $targetPath = ($x.fullname.Substring($sourceFileRootDirectory.Length + 1)).Replace("\", "/")

                  Write-Verbose "Uploading $("\" + $x.fullname.Substring($sourceFileRootDirectory.Length + 1)) to $($container.CloudBlobContainer.Uri.AbsoluteUri + "/" + $targetPath)"
                  Set-AzStorageBlobContent -File $x.fullname -Container $container.Name -Blob $targetPath -Context $ctx -Properties @{"ContentType" = "text/html"} -Force:$Force | Out-Null
                }
              }
            }

            if($(Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -Name $StorageAccountName -ErrorAction Ignore) -eq $null) {
              Write-Host "[1] Storage account doesnt exists, creating new storage account"

              New-AzStorageAccount -Location "West Europe" -Name $StorageAccountName -ResourceGroupName $StorageAccountRG -SkuName Standard_GRS -Kind StorageV2 -Tag $tags
              Write-Host "[2] New storage account created named $StorageAccountName"

              Write-Host "[3] Enabling static website hosting"
              $storageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
              $ctx = $storageAccount.Context
              Enable-AzStorageStaticWebsite -Context $ctx -IndexDocument $IndexDocumentName -ErrorDocument404Path $ErrorDocumentName

              Write-Host "[4] Deploying website"
              Upload-FileToAzureStorageContainer -StorageAccountName $StorageAccountName -ContainerName $ContainerName -StorageAccountRG $StorageAccountRG -sourceFileRootDirectory $sourceFileRootDirectory -Verbose

            } else {
              Write-Host "[1] Storage account $StorageAccountName already exists, not required to create storage account"
              Write-Host "[2]  Deploying website"
              Upload-FileToAzureStorageContainer -StorageAccountName $StorageAccountName -ContainerName $ContainerName -StorageAccountRG $StorageAccountRG -sourceFileRootDirectory $sourceFileRootDirectory -Verbose
            }

            $storageAccount = Get-AzStorageAccount -ResourceGroupName $StorageAccountRG -AccountName $StorageAccountName
            Write-Host "[FINISH]  Website deployed - see below url"
            Write-Output $storageAccount.PrimaryEndpoints.Web
          azPSVersion: "latest"

  # azure_plan_terraform:
  #   name: "Plan Terraform staging environment"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./terraform
  #   env:
  #     ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
  #     ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
  #     ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
  #     ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
  #     TF_INPUT: false

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup Terraform (Azure)
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 0.12.20

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Format
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color

  #     - uses: actions/github-script@0.9.0
  #       if: ${{ always() }}
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  #           <details><summary>Show Plan</summary>
  #           \`\`\`${process.env.PLAN}\`\`\`
  #           </details>
  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })