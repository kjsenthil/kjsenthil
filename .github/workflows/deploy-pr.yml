name: "Deploy PR environment"

on: pull_request

jobs:
  detect_changes:
    name: "Detect changes"
    runs-on: ubuntu-latest
    steps:
      - uses: dorny/paths-filter@v2.10.1
        id: changes
        with:
          filters: |
            pipelines:
              - '.github/workflows/**'
            tf_resource_group:
              - 'terraform/resource_group/**'
              - 'terraform/modules/**'
            tf_apim:
              - 'terraform/apim/**'
              - 'terraform/modules/**'
            tf_infra:
              - 'terraform/infra/**'
              - 'terraform/modules/**'
            packages:
              - 'packages/**'

    outputs:
      has_pipeline_changes: ${{ steps.changes.outputs.pipelines }}
      has_tf_resource_group_changes: ${{ steps.changes.outputs.tf_resource_group }}
      has_tf_apim_changes: ${{ steps.changes.outputs.tf_apim }}
      has_tf_infra_changes: ${{ steps.changes.outputs.tf_infra }}
      has_package_changes: ${{ steps.changes.outputs.packages }}

  build_cache:
    name: "Build caches"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set cache metadata"
        id: cache-meta
        run: |
          echo "::set-output name=key::${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
          echo "::set-output name=yarn-path::$(yarn config get cacheFolder)"
          echo "::set-output name=modules-path::**/node_modules"

      - name: "Check for existing yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Check for existing node modules cache"
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install missing dependencies"
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' || steps.node-modules-cache.outputs.cache-hit != 'true'}}
        run: yarn install

    outputs:
      key: ${{ steps.cache-meta.outputs.key }}
      yarn-path: ${{ steps.cache-meta.outputs.yarn-path }}
      modules-path: ${{ steps.cache-meta.outputs.modules-path }}

  derive_environment_prefix:
    name: "Derive environment prefix"
    runs-on: ubuntu-latest
    steps:
      # Use the first 7 chars of the hash of the branch name
      - name: "Derive environment prefix"
        id: derive-prefix
        shell: bash
        run: echo "::set-output name=sha-subset::$(echo ${{ github.head_ref }} | md5sum | awk '{print tolower(substr( $0, 1, 7))}')"

    outputs:
      prefix: ${{ steps.derive-prefix.outputs.sha-subset }}

  package_function_apps:
    name: "Package Function Apps"
    if: always()
    needs:
      - build_cache
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create function app zips"
        run: yarn all:fa:build:zip

      - name: "Collect function apps"
        run: |
          mkdir -p ./function-app-zips
          yarn all:fa:copy-zip

      - name: "Upload function app packages"
        uses: actions/upload-artifact@v2
        with:
          name: function-app-zips
          path: function-app-zips
          if-no-files-found: error

    outputs:
      artifact-name: "function-app-zips"

  deploy_rg_terraform:
    name: "Deploy Resource Group"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_resource_group_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: development
    runs-on: ubuntu-latest
    needs:
      - detect_changes

    concurrency: dev_rg_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/dev.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: rg-plan
        run: terraform plan -var-file="./var-files/dev.tfvars" -no-color

      - name: "Terraform Apply"
        run: terraform apply -var-file="./var-files/dev.tfvars" -auto-approve

  get_dev_rg_outputs:
    name: "Get dev resource group outputs"
    if: always()
    environment: development
    needs:
      - deploy_rg_terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/dev.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  # Deploys terraform APIM.
  deploy_apim_terraform:
    name: "Deploy APIM"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_apim_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: development
    needs:
      - detect_changes
      - deploy_rg_terraform
      - get_dev_rg_outputs
    runs-on: ubuntu-latest
    concurrency: dev_apim_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/dev.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        run: terraform plan -no-color -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}
          

      - name: "Terraform Apply"
        run: terraform apply -auto-approve -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}

  get_dev_apim_outputs:
    name: "Get dev APIM outputs"
    if: always()
    environment: development
    needs:
      - deploy_apim_terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/dev.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-vnet-name::$( terraform output -json | jq -r .apim_vnet_name.value )
          echo ::set-output name=apim-subnet-name::$( terraform output -json | jq -r .apim_subnet_name.value )
          echo ::set-output name=cdn-profile-name::$( terraform output -json | jq -r .cdn_profile_name.value )
          echo ::set-output name=app-insights-name::$( terraform output -json | jq -r .app_insights_name.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_vnet_name: ${{ steps.set-terraform-outputs.outputs.apim-vnet-name }}
      apim_subnet_name: ${{ steps.set-terraform-outputs.outputs.apim-subnet-name }}
      cdn_profile_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-name }}
      app_insights_name: ${{ steps.set-terraform-outputs.outputs.app-insights-name }}

  # Deploys terraform PR contents.
  deploy_pr_terraform:
    name: "Deploy PR Infrastructure"
    if: always()
    environment: development
    needs:
      - deploy_rg_terraform
      - get_dev_rg_outputs
      - deploy_apim_terraform
      - get_dev_apim_outputs
      - derive_environment_prefix
      - package_function_apps
    runs-on: ubuntu-latest
    concurrency: dev_infra_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/infra

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        id: pr-init
        run: terraform init -backend-config="./backends/pr.backend" -backend-config="key=${{ needs.derive_environment_prefix.outputs.prefix }}/terraform.tfstate"

      - name: "Terraform Validate"
        id: pr-validate
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_dev_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.get_dev_apim_outputs.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.get_dev_apim_outputs.outputs.apim_subnet_name }}
          TF_VAR_cdn_profile_name: ${{ needs.get_dev_apim_outputs.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.get_dev_apim_outputs.outputs.app_insights_name }}

      - name: "Terraform Apply"
        id: pr-apply
        run: terraform apply -auto-approve -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_dev_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.get_dev_apim_outputs.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.get_dev_apim_outputs.outputs.apim_subnet_name }}
          TF_VAR_cdn_profile_name: ${{ needs.get_dev_apim_outputs.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.get_dev_apim_outputs.outputs.app_insights_name }}

  get_pr_terraform_outputs:
    name: "Get PR Terraform outputs"
    if: always()
    environment: development
    needs:
      - derive_environment_prefix
      - deploy_pr_terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/infra

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/pr.backend" -backend-config="key=${{ needs.derive_environment_prefix.outputs.prefix }}/terraform.tfstate"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )
          echo ::set-output name=storybook-web-endpoint::$( terraform output -json | jq -r .storybook_web_endpoint.value )
          echo ::set-output name=storybook-storage-account-name::$( terraform output -json | jq -r .storybook_storage_account_name.value )
          echo ::set-output name=api-base-url::$( terraform output -json | jq -r .api_base_url.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .api_endpoints.value )

    outputs:
      frontend_storage_account_name: ${{ steps.set-terraform-outputs.outputs.frontend-storage-account-name }}
      website_endpoint: ${{ steps.set-terraform-outputs.outputs.website-endpoint }}
      storybook_storage_account_name: ${{ steps.set-terraform-outputs.outputs.storybook-storage-account-name }}
      storybook_web_endpoint: ${{ steps.set-terraform-outputs.outputs.storybook-web-endpoint }}
      api_base_url: ${{ steps.set-terraform-outputs.outputs.api-base-url }}
      api_endpoints: ${{ steps.set-terraform-outputs.outputs.api-endpoints }}


  open_storage_account_firewalls:
    name: "Open storage account firewalls for uploads"
    if: always()
    environment: development
    runs-on: ubuntu-latest
    needs:
      - get_dev_rg_outputs
      - get_pr_terraform_outputs
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Set default rule to allow to enable uploads"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update --resource-group ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }} --name ${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }} --default-action Allow
            az storage account update --resource-group ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }} --name ${{ needs.get_pr_terraform_outputs.outputs.frontend_storage_account_name }} --default-action Allow

  clear_storybook_storage_account:
    name: "Clear storybook storage account"
    if: always()
    environment: development
    runs-on: ubuntu-latest
    needs:
      - get_pr_terraform_outputs
      - open_storage_account_firewalls
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Clear storybook storage account"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }}" --source '$web'

  linting:
    name: "Checks"
    if: ${{ always() && needs.detect_changes.outputs.has_package_changes == 'true' }}
    environment: development
    runs-on: ubuntu-latest
    needs:
      - detect_changes
      - build_cache
      - get_pr_terraform_outputs
      - clear_storybook_storage_account
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Run typecheck"
        run: yarn all:typecheck

      - name: "Run linting"
        run: yarn all:lint

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Eslint Report"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/eslintreport -d "\$web/eslint" --account-name "${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }}" --type "block"

  unit_test:
    name: "Unit test"
    if: ${{ always() && needs.detect_changes.outputs.has_package_changes == 'true' }}
    environment: development
    runs-on: ubuntu-latest
    needs:
      - detect_changes
      - build_cache
      - get_pr_terraform_outputs
      - clear_storybook_storage_account
    env:
      JEST_HTML_REPORTER_PAGE_TITLE: Jest Test Summary for branch ${{ github.head_ref }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Run unit tests and code coverage"
        run: yarn frontend test:coverage

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Jest Reports"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/coverage -d "\$web/coverage" --account-name "${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }}" --type "block"
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/jesttestreport -d "\$web/jesttestreport" --account-name "${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }}" --type "block"

  end_to_end_test:
    name: "E2E test"
    if: ${{ always() && (needs.detect_changes.outputs.has_package_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: development
    runs-on: ubuntu-latest
    needs:
      - detect_changes
      - build_cache
      - get_pr_terraform_outputs
      - clear_storybook_storage_account
      - deploy_gatsby
    strategy:
      matrix:
        browser: [chrome,firefox]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-
      
      - name: "Update webdriver-manager"
        run: npx webdriver-manager update

      - name: "Run E2E UI tests"
        run : yarn test:e2e
        env :
             BROWSER: ${{matrix.browser}}
             URL: ${{ needs.deploy_gatsby.outputs.url }}
             JEST_HTML_REPORTERS_FILE_NAME: TestReport_${{matrix.browser}}.html
             JEST_HTML_REPORTERS_PUBLIC_PATH: ./reports
             API_BASE_URL : ${{ needs.get_pr_terraform_outputs.outputs.api_base_url }}
             XPLAN_APP_ID : ${{ secrets.XPLAN_APP_ID }}
             XPLAN_USERNAME: ${{ secrets.XPLAN_USERNAME }}
             XPLAN_PASSWORD: ${{ secrets.XPLAN_PASSWORD }}

      - name: "Login to Azure"
        if: always()
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Selenium Reports"
        if: always()
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: | 
                az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/testing/selenium/reports -d "\$web/reports" --account-name "${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }}" --type "block"

  # Deploys frontend pr contents
  deploy_gatsby:
    name: "Build & Deploy Gatsby"
    if: always()
    environment: development
    needs:
      - build_cache
      - get_pr_terraform_outputs
      - open_storage_account_firewalls
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create PR env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.pr
          echo 'API_ENDPOINTS=${{ needs.get_pr_terraform_outputs.outputs.api_endpoints }}' >> .env.pr
          echo 'API_BASE_URL=${{ needs.get_pr_terraform_outputs.outputs.api_base_url }}' >> .env.pr
          cat .env.pr

      - name: "Gatsby build"
        run: GATSBY_ACTIVE_ENV=pr yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Gatsby static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "${{ needs.get_pr_terraform_outputs.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "\$web" --account-name "${{ needs.get_pr_terraform_outputs.outputs.frontend_storage_account_name }}"

    outputs:
      url: ${{ needs.get_pr_terraform_outputs.outputs.website_endpoint }}

  get_staging_rg_outputs:
    name: "Get staging resource group outputs"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_infra_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: staging
    needs:
      - detect_changes
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  get_staging_apim_outputs:
    name: "Get staging APIM outputs"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_infra_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: staging
    needs:
      - detect_changes
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-vnet-name::$( terraform output -json | jq -r .apim_vnet_name.value )
          echo ::set-output name=apim-subnet-name::$( terraform output -json | jq -r .apim_subnet_name.value )
          echo ::set-output name=cdn-profile-name::$( terraform output -json | jq -r .cdn_profile_name.value )
          echo ::set-output name=app-insights-name::$( terraform output -json | jq -r .app_insights_name.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_vnet_name: ${{ steps.set-terraform-outputs.outputs.apim-vnet-name }}
      apim_subnet_name: ${{ steps.set-terraform-outputs.outputs.apim-subnet-name }}
      cdn_profile_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-name }}
      app_insights_name : ${{ steps.set-terraform-outputs.outputs.app-insights-name }}


  plan_staging:
    name: "Terraform plan Staging"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_infra_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: staging
    needs:
      - detect_changes
      - package_function_apps
      - get_staging_rg_outputs
      - get_staging_apim_outputs
    runs-on: ubuntu-latest
    concurrency: staging_infra_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/infra
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 93b71b78-b75b-4806-8282-97b9e70ae16c
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -var-file="./var-files/staging.tfvars" -no-color
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.get_staging_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_staging_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.get_staging_apim_outputs.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.get_staging_apim_outputs.outputs.apim_subnet_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_cdn_profile_name: ${{ needs.get_staging_apim_outputs.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.get_staging_apim_outputs.outputs.app_insights_name }}

    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}

  get_prod_rg_outputs:
    name: "Get prod resource group outputs"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_infra_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: prod
    needs:
      - detect_changes
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  get_prod_apim_outputs:
    name: "Get prod APIM outputs"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_infra_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: prod
    needs:
      - detect_changes
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-vnet-name::$( terraform output -json | jq -r .apim_vnet_name.value )
          echo ::set-output name=apim-subnet-name::$( terraform output -json | jq -r .apim_subnet_name.value )
          echo ::set-output name=cdn-profile-name::$( terraform output -json | jq -r .cdn_profile_name.value )
          echo ::set-output name=app-insights-name::$( terraform output -json | jq -r .app_insights_name.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_vnet_name: ${{ steps.set-terraform-outputs.outputs.apim-vnet-name }}
      apim_subnet_name: ${{ steps.set-terraform-outputs.outputs.apim-subnet-name }}
      cdn_profile_name: ${{ steps.set-terraform-outputs.outputs.cdn-profile-name }}
      app_insights_name : ${{ steps.set-terraform-outputs.outputs.app-insights-name }}

  plan_prod:
    name: "Terraform plan Prod"
    if: ${{ always() && (needs.detect_changes.outputs.has_tf_infra_changes == 'true' || needs.detect_changes.outputs.has_pipeline_changes == 'true') }}
    environment: prod
    needs:
      - detect_changes
      - package_function_apps
      - get_prod_rg_outputs
      - get_prod_apim_outputs
    runs-on: ubuntu-latest
    concurrency: prod_infra_terraform_deployment

    defaults:
      run:
        working-directory: ./terraform/infra
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: 211bb550-03e5-4e25-8e32-05ee16ac07eb
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -var-file="./var-files/prod.tfvars" -no-color
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.get_prod_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_prod_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_vnet_name: ${{ needs.get_prod_apim_outputs.outputs.apim_vnet_name }}
          TF_VAR_apim_subnet_name: ${{ needs.get_prod_apim_outputs.outputs.apim_subnet_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}
          TF_VAR_xplan_username: ${{ secrets.XPLAN_USERNAME}}
          TF_VAR_xplan_password: ${{ secrets.XPLAN_PASSWORD}}
          TF_VAR_xplan_app_id: ${{ secrets.XPLAN_APP_ID}}
          TF_VAR_cdn_profile_name: ${{ needs.get_prod_apim_outputs.outputs.cdn_profile_name }}
          TF_VAR_app_insights_name: ${{ needs.get_prod_apim_outputs.outputs.app_insights_name }}
          

    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}

  # Deploys storybook.
  deploy_storybook:
    name: "Build & deploy Storybook"
    if: always()
    environment: development
    needs:
      - build_cache
      - get_pr_terraform_outputs
      - clear_storybook_storage_account
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create PR env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.production
          echo 'API_ENDPOINTS=${{ needs.get_pr_terraform_outputs.outputs.api_endpoints }}' >> .env.production
          echo 'API_BASE_URL=${{ needs.get_pr_terraform_outputs.outputs.api_base_url }}' >> .env.production
          cat .env.production


      - name: "Build Storybook"
        run: yarn frontend build-storybook -o "./storybook-static"

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Storybook as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/storybook-static -d "\$web" --account-name "${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }}"

    outputs:
      url: ${{ needs.get_pr_terraform_outputs.outputs.storybook_web_endpoint }}

  close_storage_account_firewalls:
    name: "Close storage account firewalls for uploads"
    if: always()
    environment: development
    runs-on: ubuntu-latest
    needs:
      - get_dev_rg_outputs
      - get_pr_terraform_outputs
      - linting
      - unit_test
      - end_to_end_test
      - deploy_gatsby
      - deploy_storybook
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Set default rule to allow to enable uploads"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account update --resource-group ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }} --name ${{ needs.get_pr_terraform_outputs.outputs.storybook_storage_account_name }} --default-action Deny
            az storage account update --resource-group ${{ needs.get_dev_rg_outputs.outputs.resource_group_name }} --name ${{ needs.get_pr_terraform_outputs.outputs.frontend_storage_account_name }} --default-action Deny

  publish_results:
    name: "Publish results"
    if: always()
    needs:
      - linting
      - unit_test
      - end_to_end_test
      - deploy_gatsby
      - deploy_storybook
      - plan_staging
      - plan_prod
    runs-on: ubuntu-latest

    steps:
      - name: "Comment on PR"
        uses: actions/github-script@v3
        with:
          script: |
            const output = `
            #### Lint & Testing results
            **Linting Results:** [${{ needs.deploy_storybook.outputs.url }}/eslint/index.html](${{ needs.deploy_storybook.outputs.url }}/eslint/index.html)
            **Unit Test Coverage Report:** [${{ needs.deploy_storybook.outputs.url }}/coverage/lcov-report/index.html](${{ needs.deploy_storybook.outputs.url }}/coverage/lcov-report/index.html)
            **Unit Test Report:** [${{ needs.deploy_storybook.outputs.url }}/jesttestreport/index.html](${{ needs.deploy_storybook.outputs.url }}/jesttestreport/index.html)
            **E2E Test Results:** [${{ needs.deploy_storybook.outputs.url }}/reports/TestReport_chrome.html](${{ needs.deploy_storybook.outputs.url }}/reports/TestReport_chrome.html)
            **E2E Test Results:** [${{ needs.deploy_storybook.outputs.url }}/reports/TestReport_firefox.html](${{ needs.deploy_storybook.outputs.url }}/reports/TestReport_firefox.html)

            #### Review URLs
            **Storybook:** [${{ needs.deploy_storybook.outputs.url }}](${{ needs.deploy_storybook.outputs.url }})
            **Webpage:** [${{ needs.deploy_gatsby.outputs.url }}](${{ needs.deploy_gatsby.outputs.url }})

            #### Terraform plan - Staging
            **Outcome:** \`${{ needs.plan_staging.outputs.plan_outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${{ needs.plan_staging.outputs.plan }}\`\`\`

            </details>

            #### Terraform plan - Prod
            **Outcome** \`${{ needs.plan_prod.outputs.plan_outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${{ needs.plan_prod.outputs.plan }}\`\`\`

            </details>
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  post-to-slack:
    if: always()
    environment: development
    name: "Post to Slack"
    needs:
      - detect_changes
      - build_cache
      - derive_environment_prefix
      - package_function_apps
      - deploy_rg_terraform
      - get_dev_rg_outputs
      - deploy_apim_terraform
      - get_dev_apim_outputs
      - deploy_pr_terraform
      - get_pr_terraform_outputs
      - open_storage_account_firewalls
      - clear_storybook_storage_account
      - linting
      - unit_test
      - end_to_end_test
      - deploy_gatsby
      - deploy_storybook
      - close_storage_account_firewalls
      - get_staging_rg_outputs
      - get_staging_apim_outputs
      - plan_staging
      - get_prod_rg_outputs
      - get_prod_apim_outputs
      - plan_prod
      - publish_results
    runs-on: ubuntu-latest
    steps:
      - name: "Get current timestamp"
        id: get-current-timestamp
        run: |
          echo ::set-output name=current-timestamp::$( date +%s )

      - name: "Post to slack"
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                "color": '${{ needs.detect_changes.result }}' !== 'failure' && '${{ needs.build_cache.result }}' !== 'failure' && '${{ needs.derive_environment_prefix.result }}' !== 'failure' && '${{ needs.package_function_apps.result }}' !== 'failure' && '${{ needs.deploy_rg_terraform.result }}' !== 'failure' && '${{ needs.get_dev_rg_outputs.result }}' !== 'failure' && '${{ needs.deploy_apim_terraform.result }}' !== 'failure' && '${{ needs.get_dev_apim_outputs.result }}' !== 'failure' && '${{ needs.deploy_pr_terraform.result }}' !== 'failure' && '${{ needs.get_pr_terraform_outputs.result }}' !== 'failure' && '${{ needs.open_storage_account_firewalls.result }}' !== 'failure' && '${{ needs.clear_storybook_storage_account.result }}' !== 'failure' && '${{ needs.linting.result }}' !== 'failure' && '${{ needs.unit_test.result }}' !== 'failure' && '${{ needs.end_to_end_test.result }}' !== 'failure' && '${{ needs.deploy_gatsby.result }}' !== 'failure' && '${{ needs.deploy_storybook.result }}' !== 'failure' && '${{ needs.close_storage_account_firewalls.result }}' !== 'failure' && '${{ needs.get_staging_rg_outputs.result }}' !== 'failure' && '${{ needs.get_staging_apim_outputs.result }}' !== 'failure' && '${{ needs.plan_staging.result }}' !== 'failure' && '${{ needs.get_prod_rg_outputs.result }}' !== 'failure' && '${{ needs.get_prod_apim_outputs.result }}' !== 'failure' && '${{ needs.plan_prod.result }}' !== 'failure' && '${{ needs.publish_results.result }}' !== 'failure' ? '#009933' : '#cc0000',
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": '${{ needs.detect_changes.result }}' !== 'failure' && '${{ needs.build_cache.result }}' !== 'failure' && '${{ needs.derive_environment_prefix.result }}' !== 'failure' && '${{ needs.package_function_apps.result }}' !== 'failure' && '${{ needs.deploy_rg_terraform.result }}' !== 'failure' && '${{ needs.get_dev_rg_outputs.result }}' !== 'failure' && '${{ needs.deploy_apim_terraform.result }}' !== 'failure' && '${{ needs.get_dev_apim_outputs.result }}' !== 'failure' && '${{ needs.deploy_pr_terraform.result }}' !== 'failure' && '${{ needs.get_pr_terraform_outputs.result }}' !== 'failure' && '${{ needs.open_storage_account_firewalls.result }}' !== 'failure' && '${{ needs.clear_storybook_storage_account.result }}' !== 'failure' && '${{ needs.linting.result }}' !== 'failure' && '${{ needs.unit_test.result }}' !== 'failure' && '${{ needs.end_to_end_test.result }}' !== 'failure' && '${{ needs.deploy_gatsby.result }}' !== 'failure' && '${{ needs.deploy_storybook.result }}' !== 'failure' && '${{ needs.close_storage_account_firewalls.result }}' !== 'failure' && '${{ needs.get_staging_rg_outputs.result }}' !== 'failure' && '${{ needs.get_staging_apim_outputs.result }}' !== 'failure' && '${{ needs.plan_staging.result }}' !== 'failure' && '${{ needs.get_prod_rg_outputs.result }}' !== 'failure' && '${{ needs.get_prod_apim_outputs.result }}' !== 'failure' && '${{ needs.plan_prod.result }}' !== 'failure' && '${{ needs.publish_results.result }}' !== 'failure' ? 'Deployment Successful :rocket:' : 'Deployment Failed :rotating_light:',
                      "emoji": true
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      { "type": "mrkdwn", "text": "*Workflow Name* : ${{ github.workflow }}" }
                    ]
                  },
                  { "type": "context", "elements": [
                      { "type": "mrkdwn", "text": "*Deployment initiated by*:" },
                      { "type": "image", "image_url": "https://github.com/${{ github.actor }}.png?size=40", "alt_text": "Authors Avatar" },
                      { "type": "plain_text", "text": "${{ github.actor }}", "emoji": true }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.detect_changes.result }}' !== 'failure' && '${{ needs.build_cache.result }}' !== 'failure' && '${{ needs.derive_environment_prefix.result }}' !== 'failure' && '${{ needs.package_function_apps.result }}' !== 'failure' && '${{ needs.deploy_rg_terraform.result }}' !== 'failure' && '${{ needs.get_dev_rg_outputs.result }}' !== 'failure' && '${{ needs.deploy_apim_terraform.result }}' !== 'failure' && '${{ needs.get_dev_apim_outputs.result }}' !== 'failure' && '${{ needs.deploy_pr_terraform.result }}' !== 'failure' && '${{ needs.get_pr_terraform_outputs.result }}' !== 'failure' && '${{ needs.open_storage_account_firewalls.result }}' !== 'failure' && '${{ needs.clear_storybook_storage_account.result }}' !== 'failure' && '${{ needs.linting.result }}' !== 'failure' && '${{ needs.unit_test.result }}' !== 'failure' && '${{ needs.end_to_end_test.result }}' !== 'failure' && '${{ needs.deploy_gatsby.result }}' !== 'failure' && '${{ needs.deploy_storybook.result }}' !== 'failure' && '${{ needs.close_storage_account_firewalls.result }}' !== 'failure' && '${{ needs.get_staging_rg_outputs.result }}' !== 'failure' && '${{ needs.get_staging_apim_outputs.result }}' !== 'failure' && '${{ needs.plan_staging.result }}' !== 'failure' && '${{ needs.get_prod_rg_outputs.result }}' !== 'failure' && '${{ needs.get_prod_apim_outputs.result }}' !== 'failure' && '${{ needs.plan_prod.result }}' !== 'failure' && '${{ needs.publish_results.result }}' !== 'failure' ? ':heavy-check-mark:   *Deployment Status*: Success' : ':heavy-cross-mark:   *Deployment Status*: Failure'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":merge:   *Branch Name*: <https://github.com/${{ github.repository }}/tree/${{ github.head_ref }}|${{ github.head_ref }}>"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":arrow_right:   *Branch Prefix*: ${{ needs.derive_environment_prefix.outputs.prefix }}"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Job Conclusions for this workflow run.*"
                    }
                  },
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.detect_changes.result }}' === 'success' ? ':heavy-check-mark:   Detect Changes' : '${{ needs.detect_changes.result }}' === 'failure' ? ':heavy-cross-mark:   Detect Changes' : ':heavy-minus-sign:   Detect Changes' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.build_cache.result }}' === 'success' ? ':heavy-check-mark:   Build Cache' : '${{ needs.build_cache.result }}' === 'failure' ? ':heavy-cross-mark:   Build Cache' : ':heavy-minus-sign:   Build Cache' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.derive_environment_prefix.result }}' === 'success' ? ':heavy-check-mark:   Derive Environment Prefix' : '${{ needs.derive_environment_prefix.result }}' === 'failure' ? ':heavy-cross-mark:   Derive Environment Prefix' : ':heavy-minus-sign:   Derive Environment Prefix' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.package_function_apps.result }}' === 'success' ? ':heavy-check-mark:   Package Function Apps' : '${{ needs.package_function_apps.result }}' === 'failure' ? ':heavy-cross-mark:   Package Function Apps' : ':heavy-minus-sign:   Package Function Apps' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.deploy_rg_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Resource Group' : '${{ needs.deploy_rg_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Resource Group' : ':heavy-minus-sign:   Deploy Resource Group' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_dev_rg_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get Dev RG TF Outputs' : '${{ needs.get_dev_rg_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Dev RG TF Outputs' : ':heavy-minus-sign:   Get Dev RG TF Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.deploy_apim_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy APIM' : '${{ needs.deploy_apim_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy APIM' : ':heavy-minus-sign:   Deploy APIM' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_dev_apim_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get Dev APIM TF Outputs' : '${{ needs.get_dev_apim_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Get Dev APIM TF Outputs' : ':heavy-minus-sign:   Get Dev APIM TF Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy PR Infrastructure' : '${{ needs.deploy_pr_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy PR Infrastructure' : ':heavy-minus-sign:   Deploy PR Infrastructure' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_pr_terraform_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get PR Infrastructure Outputs' : '${{ needs.get_pr_terraform_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Get PR Infrastructure Outputs' : ':heavy-minus-sign:   Get PR Infrastructure Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.open_storage_account_firewalls.result }}' === 'success' ? ':heavy-check-mark:   Open Storage Account Firewalls' : '${{ needs.open_storage_account_firewalls.result }}' === 'failure' ? ':heavy-cross-mark:   Open Storage Account Firewalls' : ':heavy-minus-sign:   Open Storage Account Firewalls' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.clear_storybook_storage_account.result }}' === 'success' ? ':heavy-check-mark:   Clear Storybook Storage Account' : '${{ needs.clear_storybook_storage_account.result }}' === 'failure' ? ':heavy-cross-mark:   Clear Storybook Storage Account' : ':heavy-minus-sign:   Clear Storybook Storage Account'}},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_staging_rg_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get Staging RG TF Outputs' : '${{ needs.get_staging_rg_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Get Staging RG TF Outputs' : ':heavy-minus-sign:   Get Staging RG TF Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_staging_apim_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get Staging APIM TF Outputs' : '${{ needs.get_staging_apim_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Get Staging APIM TF Outputs' : ':heavy-minus-sign:   Get Staging APIM TF Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.plan_staging.result }}' === 'success' ? ':heavy-check-mark:   Terraform Plan - Staging' : '${{ needs.plan_staging.result }}' === 'failure' ? ':heavy-cross-mark:   Terraform Plan - Staging' : ':heavy-minus-sign:   Terraform Plan - Staging' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_prod_rg_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get Prod RG TF Outputs' : '${{ needs.get_prod_rg_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Get Prod RG TF Outputs' : ':heavy-minus-sign:   Get Prod RG TF Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.get_prod_apim_outputs.result }}' === 'success' ? ':heavy-check-mark:   Get Prod APIM TF Outputs' : '${{ needs.get_prod_apim_outputs.result }}' === 'failure' ? ':heavy-cross-mark:   Get Prod APIM TF Outputs' : ':heavy-minus-sign:   Get Prod APIM TF Outputs' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.plan_prod.result }}' === 'success' ? ':heavy-check-mark:   Terraform Plan - Production' : '${{ needs.plan_prod.result }}' === 'failure' ? ':heavy-cross-mark:   Terraform Plan - Production' : ':heavy-minus-sign:   Terraform Plan - Production' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.linting.result }}' === 'success' ? ':heavy-check-mark:   Linting Checks' : '${{ needs.linting.result }}' === 'failure' ? ':heavy-cross-mark:   Linting Checks' : ':heavy-minus-sign:   Linting Checks' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.unit_test.result }}' === 'success' ? ':heavy-check-mark:   Unit Tests' : '${{ needs.unit_test.result }}' === 'failure' ? ':heavy-cross-mark:   Unit Tests' : ':heavy-minus-sign:   Unit Tests' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.deploy_storybook.result }}' === 'success' ? ':heavy-check-mark:   Build &amp; Deploy Storybook' : '${{ needs.deploy_storybook.result }}' === 'failure' ? ':heavy-cross-mark:   Build &amp; Deploy Storybook' : ':heavy-minus-sign:   Build &amp; Deploy Storybook' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.close_storage_account_firewalls.result }}' === 'success' ? ':heavy-check-mark:   Close Storage Account Firewalls' : '${{ needs.close_storage_account_firewalls.result }}' === 'failure' ? ':heavy-cross-mark:   Close Storage Account Firewalls' : ':heavy-minus-sign:   Close Storage Account Firewalls' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.end_to_end_test.result }}' === 'success' ? ':heavy-check-mark:   E2E Tests' : '${{ needs.end_to_end_test.result }}' === 'failure' ? ':heavy-cross-mark:   E2E Tests' : ':heavy-minus-sign:   E2E Tests' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.deploy_gatsby.result }}' === 'success' ? ':heavy-check-mark:   Build &amp; Deploy Gatsby App' : '${{ needs.deploy_gatsby.result }}' === 'failure' ? ':heavy-cross-mark:   Build &amp; Deploy Gatsby App' : ':heavy-minus-sign:   Build &amp; Deploy Gatsby App' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ needs.publish_results.result }}' === 'success' ? ':heavy-check-mark:   Publish Results to PR' : '${{ needs.publish_results.result }}' === 'failure' ? ':heavy-cross-mark:   Publish Results to PR' : ':heavy-minus-sign:   Publish Results to PR' }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": '${{ job.status }}' === 'success' ? ':heavy-check-mark:   Post to Slack' : '${{ job.status }}' === 'failure' ? ':heavy-cross-mark:   Post to Slack' : ':heavy-minus-sign:   Post to Slack' }},
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Useful links for this workflow run.*"
                    }
                  },
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":hammer_and_wrench:   Workflow run for this deployment" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "Workflow run", "emoji": true }, "value": "Link to this run instance", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "action_id": "button-action" }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up:   Selenium Chrome report" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "Selenium Chrome report", "emoji": true }, "value": "Link to Selenium report", "url": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}/reports/TestReport_chrome.html' : 'https://www.google.com/404.html', "action_id": "button-action" }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up:   Selenium Firefox report" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "Selenium Firefox report", "emoji": true },"value": "Link to Selenium report", "url": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}/reports/TestReport_firefox.html' : 'https://www.google.com/404.html', "action_id": "button-action"}},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up:   Jest Coverage report" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "Jest coverage report", "emoji": true }, "value": "Link to Jest coverage report", "url": '${{ needs.unit_test.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}/coverage/lcov-report/index.html' : 'https://www.google.com/404.html', "action_id": "button-action" }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up:   Jest test report" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "Jest test report", "emoji": true }, "value": "Link to Jest test report", "url": '${{ needs.unit_test.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}/jesttestreport/index.html' : 'https://www.google.com/404.html', "action_id": "button-action" }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up:   ESlint report" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "eslint report", "emoji": true }, "value": "Link to ESlint report", "url": '${{ needs.linting.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}/eslint/index.html' : 'https://www.google.com/404.html', "action_id": "button-action" }},
                  {
                    "type": "divider"
                  },
                  { "type": "section", "text": { "type": "mrkdwn", "text": "*Storybook and Website links for this workflow run.*" }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":jigsaw:   Storybook" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "View storybook", "emoji": true }, "value": "Link to Storybook website", "url": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}' : 'https://www.google.com/404.html', "action_id": "button-action" }},
                  { "type": "section", "text": { "type": "mrkdwn", "text": ":globe_with_meridians:   Digital-Hybrid website" }, "accessory": { "type": "button", "text": { "type": "plain_text", "text": "View website", "emoji": true }, "value": "Link to DH website", "url": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_gatsby.outputs.url }}' : 'https://www.google.com/404.html', "action_id": "button-action" }},
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": ":airplane_arriving: *<!date^${{ steps.get-current-timestamp.outputs.current-timestamp }}^Posted on {date_long} at {time_secs}|Date and Time of this message when it was posted.>*"
                      }
                    ]
                  }
                ]
              }]
            }
