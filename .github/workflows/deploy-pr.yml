name: "Deploy terraform and frontend to PR environment"

on: pull_request

jobs:
  build_cache:
    name: "Build caches"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set cache metadata"
        id: cache-meta
        run: |
          echo "::set-output name=key::${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
          echo "::set-output name=yarn-path::$(yarn config get cacheFolder)"
          echo "::set-output name=modules-path::**/node_modules"

      - name: "Check for existing yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Check for existing node modules cache"
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install missing dependencies"
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' || steps.node-modules-cache.outputs.cache-hit != 'true'}}
        run: yarn install

    outputs:
      key: ${{ steps.cache-meta.outputs.key }}
      yarn-path: ${{ steps.cache-meta.outputs.yarn-path }}
      modules-path: ${{ steps.cache-meta.outputs.modules-path }}

  derive_environment_prefix:
    name: "Derive environment prefix"
    runs-on: ubuntu-latest
    steps:
      # Use the first 7 chars of the hash of the branch name
      - name: "Derive environment prefix"
        id: derive-prefix
        shell: bash
        run: echo "::set-output name=sha-subset::$(echo ${{ github.head_ref }} | md5sum | awk '{print tolower(substr( $0, 1, 7))}')"

    outputs:
      prefix: ${{ steps.derive-prefix.outputs.sha-subset }}

  # Deploys terraform APIM.
  deploy_apim_terraform:
    name: "Deploy APIM"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/env/dev/apim

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        id: apim-init
        run: terraform init

      - name: "Terraform Validate"
        id: apim-validate
        run: terraform validate -no-color

      - name: "Terraform Apply"
        id: apim-apply
        run: terraform apply -auto-approve

  # Deploys terraform PR contents.
  deploy_pr_terraform:
    name: "Deploy Terraform"
    needs: [deploy_apim_terraform, derive_environment_prefix]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/env/dev/pr

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        id: pr-init
        run: terraform init -backend-config="key=digital-hybrid-backend/dev/${{ needs.derive_environment_prefix.outputs.prefix }}/terraform.tfstate"

      - name: "Terraform Validate"
        id: pr-validate
        run: terraform validate -no-color

      - name: "Terraform Apply"
        id: pr-apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}

      - name: "Get Terraform Outputs"
        id: get-terraform-outputs
        working-directory: ./terraform/env/dev/pr
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .endpoints.value )
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .dev_apim_rg.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )
          echo ::set-output name=storybook-web-endpoint::$( terraform output -json | jq -r .storybook_web_endpoint.value )
          echo ::set-output name=storybook-storage-account-name::$( terraform output -json | jq -r .storybook_storage_account_name.value )

    outputs:
      frontend_storage_account_name: ${{ steps.get-terraform-outputs.outputs.frontend-storage-account-name }}
      resource_group_name: ${{ steps.get-terraform-outputs.outputs.resource-group-name }}
      api_endpoints: ${{ steps.get-terraform-outputs.outputs.api-endpoints }}
      website_endpoint: ${{ steps.get-terraform-outputs.outputs.website-endpoint }}
      storybook_storage_account_name: ${{ steps.get-terraform-outputs.outputs.storybook-storage-account-name }}
      storybook_web_endpoint: ${{ steps.get-terraform-outputs.outputs.storybook-web-endpoint }}

  linting:
    name: "Linting"
    runs-on: ubuntu-latest
    needs: build_cache
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Run formatting"
        run: yarn frontend format:check

      - name: "Run linting"
        run: yarn frontend lint

  unit_test:
    name: "Unit test"
    runs-on: ubuntu-latest
    needs: build_cache
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Run unit tests and code coverage"
        run: yarn frontend test:coverage

  end_to_end_test:
    name: "E2E test"
    runs-on: ubuntu-latest
    needs: [build_cache, linting, unit_test, deploy_pr_terraform]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install Cypress binary"
        run: npx cypress install

      - name: "Create PR env file"
        working-directory: ./hybrid-frontend
        run: |
          touch .env.pr
          echo 'API_ENDPOINTS=${{ needs.deploy_pr_terraform.outputs.api_endpoints }}' >> .env.pr
          echo 'ASSETS_API_BASE_URL=https://digital-hybrid-mgmt.azure-api.net/digitalhybrid/Assets' >> .env.pr
          echo 'XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk' >> .env.pr
          cat .env.pr

      # Gatsby can run over the default number of file watchers so we need to up this value
      - name: "Increase file watchers for Gatsby"
        shell: bash
        working-directory: ./hybrid-frontend
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: "Run E2E UI tests"
        run: GATSBY_ACTIVE_ENV=pr yarn frontend test:e2e:ci

  # Deploys frontend pr contents
  deploy_gatsby:
    name: "Build & Deploy Gatsby"
    needs: [deploy_pr_terraform, build_cache, linting, unit_test]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create PR env file"
        working-directory: ./hybrid-frontend
        run: |
          touch .env.pr
          echo 'API_ENDPOINTS=${{ needs.deploy_pr_terraform.outputs.api_endpoints }}' >> .env.pr
          echo 'ASSETS_API_BASE_URL=https://digital-hybrid-mgmt.azure-api.net/digitalhybrid/Assets' >> .env.pr
          echo 'XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk' >> .env.pr
          cat .env.pr

      - name: "Gatsby build"
        run: GATSBY_ACTIVE_ENV=pr yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Gatsby static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "${{ needs.deploy_pr_terraform.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/hybrid-frontend/public -d "\$web" --account-name "${{ needs.deploy_pr_terraform.outputs.frontend_storage_account_name }}"

    outputs:
      url: ${{ needs.deploy_pr_terraform.outputs.website_endpoint }}

  plan_staging:
    name: "Terraform plan Staging"
    needs: [deploy_pr_terraform]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/env/staging
    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        run: terraform init

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color

    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}

  plan_prod:
    name: "Terraform plan Prod"
    needs: [deploy_pr_terraform]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/env/prod
    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        run: terraform init

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color

    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}


  # TODO Deploy the storybook container here via terraform
  # Deploys storybook.
  deploy_storybook:
    name: "Build & deploy Storybook"
    needs: [build_cache, deploy_pr_terraform]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Build Storybook"
        run: yarn frontend build-storybook -o "./storybook-static"

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Storybook as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/hybrid-frontend/storybook-static -d "\$web" --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}"

    outputs:
        url: ${{ needs.deploy_pr_terraform.outputs.storybook_web_endpoint }}

  publish_results:
    name: "Publish results"
    needs: [linting, unit_test, end_to_end_test, deploy_gatsby, deploy_storybook, plan_staging, plan_prod]
    runs-on: ubuntu-latest

    steps:
      - name: "Comment on PR"
        uses: actions/github-script@v3
        with:
          script: |
            const output = `
            #### Lint & Testing results
            **Linting Results:** \`TODO\`
            **Unit Test Results:** \`TODO\`
            **E2E Test Results:** \`TODO\`

            #### Review URLs
            **Storybook:** \`${{ needs.deploy_storybook.outputs.url }}\`
            **Webpage:** \`${{ needs.deploy_gatsby.outputs.url }}\`

            #### Terraform plan - Staging
            **Outcome:** \`${{ needs.plan_staging.outputs.plan_outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${{ needs.plan_staging.outputs.plan }}\`\`\`

            </details>

            #### Terraform plan - Prod
            **Outcome** \`${{ needs.plan_prod.outputs.plan_outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${{ needs.plan_prod.outputs.plan }}\`\`\`

            </details>
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
