name: "Deploy PR environment"

on: pull_request

jobs:
  build_cache:
    name: "Build caches"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set cache metadata"
        id: cache-meta
        run: |
          echo "::set-output name=key::${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}"
          echo "::set-output name=yarn-path::$(yarn config get cacheFolder)"
          echo "::set-output name=modules-path::**/node_modules"

      - name: "Check for existing yarn cache"
        uses: actions/cache@v2
        id: yarn-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Check for existing node modules cache"
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          key: ${{ steps.cache-meta.outputs.key }}
          path: ${{ steps.cache-meta.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install missing dependencies"
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' || steps.node-modules-cache.outputs.cache-hit != 'true'}}
        run: yarn install

    outputs:
      key: ${{ steps.cache-meta.outputs.key }}
      yarn-path: ${{ steps.cache-meta.outputs.yarn-path }}
      modules-path: ${{ steps.cache-meta.outputs.modules-path }}

  derive_environment_prefix:
    name: "Derive environment prefix"
    runs-on: ubuntu-latest
    steps:
      # Use the first 7 chars of the hash of the branch name
      - name: "Derive environment prefix"
        id: derive-prefix
        shell: bash
        run: echo "::set-output name=sha-subset::$(echo ${{ github.head_ref }} | md5sum | awk '{print tolower(substr( $0, 1, 7))}')"

    outputs:
      prefix: ${{ steps.derive-prefix.outputs.sha-subset }}

  package_function_apps:
    name: "Package Function Apps"
    needs: [build_cache]
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create function app zips"
        run: yarn all:fa:build:zip

      - name: "Collect function apps"
        run: |
          mkdir -p ./function-app-zips
          yarn all:fa:copy-zip

      - name: "Upload function app packages"
        uses: actions/upload-artifact@v2
        with:
          name: function-app-zips
          path: function-app-zips
          if-no-files-found: error

    outputs:
      artifact-name: "function-app-zips"

  deploy_rg_terraform:
    name: "Deploy Resource Group"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/dev.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: rg-plan
        run: terraform plan -var-file="./var-files/dev.tfvars" -no-color

      - name: "Terraform Apply"
        run: terraform apply -var-file="./var-files/dev.tfvars" -auto-approve

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  # Deploys terraform APIM.
  deploy_apim_terraform:
    name: "Deploy APIM"
    needs: [deploy_rg_terraform]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/dev.backend"

      - name: "Terraform Validate"
        run: terraform validate -no-color

      - name: "Terraform Plan"
        run: terraform plan -no-color -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_rg_terraform.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}

      - name: "Terraform Apply"
        run: terraform apply -auto-approve -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_resource_group_name: ${{ needs.deploy_rg_terraform.outputs.resource_group_name }}
          TF_VAR_myaccount_signing_key: ${{ secrets.MYACCOUNTS_SIGNING_KEY}}

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-subnet-id::$( terraform output -json | jq -r .apim_subnet_id.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_subnet_id: ${{ steps.set-terraform-outputs.outputs.apim-subnet-id }}

  # Deploys terraform PR contents.
  deploy_pr_terraform:
    name: "Deploy PR Infrastructure"
    needs:
      [
        deploy_rg_terraform,
        deploy_apim_terraform,
        derive_environment_prefix,
        package_function_apps,
      ]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/infra

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        id: pr-init
        run: terraform init -backend-config="./backends/pr.backend" -backend-config="key=${{ needs.derive_environment_prefix.outputs.prefix }}/terraform.tfstate"

      - name: "Terraform Validate"
        id: pr-validate
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.deploy_rg_terraform.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.deploy_apim_terraform.outputs.apim_name }}
          TF_VAR_apim_subnet_id: ${{ needs.deploy_apim_terraform.outputs.apim_subnet_id }}

      - name: "Terraform Apply"
        id: pr-apply
        run: terraform apply -auto-approve -var-file="./var-files/dev.tfvars"
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.deploy_rg_terraform.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.deploy_apim_terraform.outputs.apim_name }}
          TF_VAR_apim_subnet_id: ${{ needs.deploy_apim_terraform.outputs.apim_subnet_id }}

      - name: "Get Terraform Outputs"
        id: get-terraform-outputs
        run: |
          echo ::set-output name=frontend-storage-account-name::$( terraform output -json | jq -r .frontend_storage_account_name.value )
          echo ::set-output name=api-endpoints::$( terraform output -json | jq -r .endpoints.value )
          echo ::set-output name=website-endpoint::$( terraform output -json | jq -r .frontend_web_endpoint.value )
          echo ::set-output name=storybook-web-endpoint::$( terraform output -json | jq -r .storybook_web_endpoint.value )
          echo ::set-output name=storybook-storage-account-name::$( terraform output -json | jq -r .storybook_storage_account_name.value )

    outputs:
      frontend_storage_account_name: ${{ steps.get-terraform-outputs.outputs.frontend-storage-account-name }}
      api_endpoints: ${{ steps.get-terraform-outputs.outputs.api-endpoints }}
      website_endpoint: ${{ steps.get-terraform-outputs.outputs.website-endpoint }}
      storybook_storage_account_name: ${{ steps.get-terraform-outputs.outputs.storybook-storage-account-name }}
      storybook_web_endpoint: ${{ steps.get-terraform-outputs.outputs.storybook-web-endpoint }}

  clear_storybook_storage_account:
    name: "Clear storybook storage account"
    runs-on: ubuntu-latest
    needs: deploy_pr_terraform
    steps:
      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Clear storybook storage account"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}" --source '$web'

  linting:
    name: "Checks"
    runs-on: ubuntu-latest
    needs: [build_cache, deploy_pr_terraform, clear_storybook_storage_account]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Run typecheck"
        run: yarn all:typecheck

      - name: "Run linting"
        run: yarn all:lint

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Eslint Report"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/eslintreport -d "\$web/eslint" --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}" --type "block"

  unit_test:
    name: "Unit test"
    runs-on: ubuntu-latest
    needs: [build_cache, deploy_pr_terraform, clear_storybook_storage_account]
    env:
      JEST_HTML_REPORTER_PAGE_TITLE: Jest Test Summary for branch ${{ github.head_ref }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Run unit tests and code coverage"
        run: yarn frontend test:coverage

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Jest Reports"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/coverage -d "\$web/coverage" --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}" --type "block"
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/jesttestreport -d "\$web/jesttestreport" --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}" --type "block"

  end_to_end_test:
    name: "E2E test"
    runs-on: ubuntu-latest
    needs:
      [
        build_cache,
        linting,
        unit_test,
        deploy_pr_terraform,
        clear_storybook_storage_account,
      ]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Install Cypress binary"
        run: npx cypress install

      - name: "Create PR env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.pr
          echo 'API_ENDPOINTS=${{ needs.deploy_pr_terraform.outputs.api_endpoints }}' >> .env.pr
          echo 'ASSETS_API_BASE_URL=https://digital-hybrid-mgmt.azure-api.net/digitalhybrid/Assets' >> .env.pr
          echo 'XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk' >> .env.pr
          cat .env.pr

      # Gatsby can run over the default number of file watchers so we need to up this value
      - name: "Increase file watchers for Gatsby"
        shell: bash
        working-directory: ./packages/hybrid-frontend
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: "Run E2E UI tests"
        run: GATSBY_ACTIVE_ENV=pr yarn frontend test:e2e:ci

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Cypress Report"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/cypress/report -d "\$web/cypress" --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}" --type "block"

  # Deploys frontend pr contents
  deploy_gatsby:
    name: "Build & Deploy Gatsby"
    needs: [deploy_pr_terraform, build_cache, linting, unit_test]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Create PR env file"
        working-directory: ./packages/hybrid-frontend
        run: |
          touch .env.pr
          echo 'API_ENDPOINTS=${{ needs.deploy_pr_terraform.outputs.api_endpoints }}' >> .env.pr
          echo 'ASSETS_API_BASE_URL=https://digital-hybrid-mgmt.azure-api.net/digitalhybrid/Assets' >> .env.pr
          echo 'XPLAN_BASE_URL=https://tbigroupuat2.xplan.iress.co.uk' >> .env.pr
          cat .env.pr

      - name: "Gatsby build"
        run: GATSBY_ACTIVE_ENV=pr yarn frontend build

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Gatsby static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch --account-name "${{ needs.deploy_pr_terraform.outputs.frontend_storage_account_name }}" --source '$web'
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/public -d "\$web" --account-name "${{ needs.deploy_pr_terraform.outputs.frontend_storage_account_name }}"

    outputs:
      url: ${{ needs.deploy_pr_terraform.outputs.website_endpoint }}

  get_staging_rg_outputs:
    name: "Get staging resource group outputs"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  get_staging_apim_outputs:
    name: "Get staging APIM outputs"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-subnet-id::$( terraform output -json | jq -r .apim_subnet_id.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_subnet_id: ${{ steps.set-terraform-outputs.outputs.apim-subnet-id }}

  plan_staging:
    name: "Terraform plan Staging"
    needs: [deploy_pr_terraform, package_function_apps, get_staging_rg_outputs, get_staging_apim_outputs]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/infra
    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/staging.backend"

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -var-file="./var-files/staging.tfvars" -no-color
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.get_staging_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_staging_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_subnet_id: ${{ needs.get_staging_apim_outputs.outputs.apim_subnet_id }}

    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}

  get_prod_rg_outputs:
    name: "Get prod resource group outputs"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/resource_group

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=resource-group-name::$( terraform output -json | jq -r .resource_group_name.value )

    outputs:
      resource_group_name: ${{ steps.set-terraform-outputs.outputs.resource-group-name }}

  get_prod_apim_outputs:
    name: "Get prod APIM outputs"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform/apim

    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Set Terraform Outputs"
        id: set-terraform-outputs
        run: |
          echo ::set-output name=apim-name::$( terraform output -json | jq -r .apim_name.value )
          echo ::set-output name=apim-subnet-id::$( terraform output -json | jq -r .apim_subnet_id.value )

    outputs:
      apim_name: ${{ steps.set-terraform-outputs.outputs.apim-name }}
      apim_subnet_id: ${{ steps.set-terraform-outputs.outputs.apim-subnet-id }}

  plan_prod:
    name: "Terraform plan Prod"
    needs: [deploy_pr_terraform, package_function_apps, get_prod_rg_outputs, get_prod_apim_outputs]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/infra
    env:
      ARM_CLIENT_ID: 1031f58e-c51e-46ea-8803-74e19d760359
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 12cc0aaa-84e6-49d1-afc3-743c4b0b2d56
      ARM_TENANT_ID: 7bec33a8-0ab6-4da4-9f1f-f5dcbae296db
      TF_INPUT: false

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Download function app zips"
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.package_function_apps.outputs.artifact-name }}
          path: ./terraform/infra/zips

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: "Terraform Init"
        run: terraform init -backend-config="./backends/prod.backend"

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -var-file="./var-files/prod.tfvars" -no-color
        env:
          TF_VAR_environment_prefix: ${{ needs.derive_environment_prefix.outputs.prefix }}
          TF_VAR_resource_group_name: ${{ needs.get_prod_rg_outputs.outputs.resource_group_name }}
          TF_VAR_apim_name: ${{ needs.get_prod_apim_outputs.outputs.apim_name }}
          TF_VAR_apim_subnet_id: ${{ needs.get_prod_apim_outputs.outputs.apim_subnet_id }}

    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
      plan: ${{ steps.plan.outputs.stdout }}

  # TODO Deploy the storybook container here via terraform
  # Deploys storybook.
  deploy_storybook:
    name: "Build & deploy Storybook"
    needs: [build_cache, deploy_pr_terraform, clear_storybook_storage_account]
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: "Get yarn cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.yarn-path }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Get node modules cache"
        uses: actions/cache@v2
        with:
          key: ${{ needs.build_cache.outputs.key }}
          path: ${{ needs.build_cache.outputs.modules-path }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: "Build Storybook"
        run: yarn frontend build-storybook -o "./storybook-static"

      - name: "Login to Azure"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy Storybook as static website"
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch -s $GITHUB_WORKSPACE/packages/hybrid-frontend/storybook-static -d "\$web" --account-name "${{ needs.deploy_pr_terraform.outputs.storybook_storage_account_name }}"

    outputs:
      url: ${{ needs.deploy_pr_terraform.outputs.storybook_web_endpoint }}

  publish_results:
    name: "Publish results"
    needs:
      [
        linting,
        unit_test,
        end_to_end_test,
        deploy_gatsby,
        deploy_storybook,
        plan_staging,
        plan_prod,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: "Comment on PR"
        uses: actions/github-script@v3
        with:
          script: |
            const output = `
            #### Lint & Testing results
            **Linting Results:** \`${{ needs.deploy_storybook.outputs.url }}eslint/index.html\`
            **Unit Test Coverage Report:** \`${{ needs.deploy_storybook.outputs.url }}coverage/lcov-report/index.html\`
            **Unit Test Report:** \`${{ needs.deploy_storybook.outputs.url }}jesttestreport/index.html\`
            **E2E Test Results:** \`${{ needs.deploy_storybook.outputs.url }}cypress/index.html\`

            #### Review URLs
            **Storybook:** \`${{ needs.deploy_storybook.outputs.url }}\`
            **Webpage:** \`${{ needs.deploy_gatsby.outputs.url }}\`

            #### Terraform plan - Staging
            **Outcome:** \`${{ needs.plan_staging.outputs.plan_outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${{ needs.plan_staging.outputs.plan }}\`\`\`

            </details>

            #### Terraform plan - Prod
            **Outcome** \`${{ needs.plan_prod.outputs.plan_outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${{ needs.plan_prod.outputs.plan }}\`\`\`

            </details>
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  post-to-slack:
    if: always()
    name: "Post to Slack"
    needs:
      [
        build_cache,
        derive_environment_prefix,
        package_function_apps,
        deploy_rg_terraform,
        deploy_apim_terraform,
        deploy_pr_terraform,
        clear_storybook_storage_account,
        plan_staging,
        plan_prod,
        linting,
        unit_test,
        deploy_storybook,
        end_to_end_test,
        deploy_gatsby,
        publish_results,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: "Get current timestamp"
        id: get-current-timestamp
        run: |
          echo ::set-output name=current-timestamp::$( date +%s )

      - name: "Post to slack"
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV }}
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                "color": '${{ needs.linting.result }}' === 'success' && '${{ needs.unit_test.result }}' === 'success' && '${{ needs.end_to_end_test.result }}' === 'success' && '${{ needs.deploy_storybook.result }}' === 'success' && '${{ needs.deploy_gatsby.result }}' === 'success' && '${{ needs.deploy_apim_terraform.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' && '${{ needs.plan_staging.result }}' === 'success' && '${{ needs.plan_prod.result }}' === 'success' ? '#009933' : '#cc0000',
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": '${{ needs.linting.result }}' === 'success' && '${{ needs.unit_test.result }}' === 'success' && '${{ needs.end_to_end_test.result }}' === 'success' && '${{ needs.deploy_storybook.result }}' === 'success' && '${{ needs.deploy_gatsby.result }}' === 'success' && '${{ needs.deploy_apim_terraform.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' && '${{ needs.plan_staging.result }}' === 'success' && '${{ needs.plan_prod.result }}' === 'success' ? 'Deployment Success :rocket:' : 'Deployment Failed :rotating_light:',
                      "emoji": true
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "*Workflow Name* : ${{ github.workflow }}"
                      }
                    ]
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "*Deployment initiated by*:"
                      },
                      {
                        "type": "image",
                        "image_url": "https://github.com/${{ github.actor }}.png?size=40",
                        "alt_text": "Authors Avatar"
                      },
                      {
                        "type": "plain_text",
                        "text": "${{ github.actor }}",
                        "emoji": true
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.linting.result }}' === 'success' && '${{ needs.unit_test.result }}' === 'success' && '${{ needs.end_to_end_test.result }}' === 'success' && '${{ needs.deploy_storybook.result }}' === 'success' && '${{ needs.deploy_gatsby.result }}' === 'success' && '${{ needs.deploy_apim_terraform.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' && '${{ needs.plan_staging.result }}' === 'success' && '${{ needs.plan_prod.result }}' === 'success' ? ':heavy-check-mark:   *Deployment Status*: Success' : ':heavy-cross-mark:   *Deployment Status*: Failure'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":merge:   *Branch Name*: <https://github.com/${{ github.repository }}/tree/${{ github.head_ref }}|${{ github.head_ref }}>"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":arrow_right:   *Branch Prefix*: ${{ needs.derive_environment_prefix.outputs.prefix }}"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Job Conclusions for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.build_cache.result }}' === 'success' ? ':heavy-check-mark:   Build Cache' : '${{ needs.build_cache.result }}' === 'failure' ? ':heavy-cross-mark:   Build Cache' : ':heavy-minus-sign:   Build Cache'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.derive_environment_prefix.result }}' === 'success' ? ':heavy-check-mark:   Derive Environment Prefix' : '${{ needs.derive_environment_prefix.result }}' === 'failure' ? ':heavy-cross-mark:   Derive Environment Prefix' : ':heavy-minus-sign:   Derive Environment Prefix'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.package_function_apps.result }}' === 'success' ? ':heavy-check-mark:   Package Function Apps' : '${{ needs.package_function_apps.result }}' === 'failure' ? ':heavy-cross-mark:   Package Function Apps' : ':heavy-minus-sign:   Package Function Apps'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_rg_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy Resource Group' : '${{ needs.deploy_rg_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy Resource Group' : ':heavy-minus-sign:   Deploy Resource Group'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_apim_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy APIM' : '${{ needs.deploy_apim_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy APIM' : ':heavy-minus-sign:   Deploy APIM'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? ':heavy-check-mark:   Deploy PR Infrastructure' : '${{ needs.deploy_pr_terraform.result }}' === 'failure' ? ':heavy-cross-mark:   Deploy PR Infrastructure' : ':heavy-minus-sign:   Deploy PR Infrastructure'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.clear_storybook_storage_account.result }}' === 'success' ? ':heavy-check-mark:   Clear Storybook Storage Account' : '${{ needs.clear_storybook_storage_account.result }}' === 'failure' ? ':heavy-cross-mark:   Clear Storybook Storage Account' : ':heavy-minus-sign:   Clear Storybook Storage Account'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.plan_staging.result }}' === 'success' ? ':heavy-check-mark:   Terraform Plan - Staging' : '${{ needs.plan_staging.result }}' === 'failure' ? ':heavy-cross-mark:   Terraform Plan - Staging' : ':heavy-minus-sign:   Terraform Plan - Staging'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.plan_prod.result }}' === 'success' ? ':heavy-check-mark:   Terraform Plan - Production' : '${{ needs.plan_prod.result }}' === 'failure' ? ':heavy-cross-mark:   Terraform Plan - Production' : ':heavy-minus-sign:   Terraform Plan - Production'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.linting.result }}' === 'success' ? ':heavy-check-mark:   Linting Checks' : '${{ needs.linting.result }}' === 'failure' ? ':heavy-cross-mark:   Linting Checks' : ':heavy-minus-sign:   Linting Checks'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.unit_test.result }}' === 'success' ? ':heavy-check-mark:   Unit Tests' : '${{ needs.unit_test.result }}' === 'failure' ? ':heavy-cross-mark:   Unit Tests' : ':heavy-minus-sign:   Unit Tests'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_storybook.result }}' === 'success' ? ':heavy-check-mark:   Build &amp; Deploy Storybook' : '${{ needs.deploy_storybook.result }}' === 'failure' ? ':heavy-cross-mark:   Build &amp; Deploy Storybook' : ':heavy-minus-sign:   Build &amp; Deploy Storybook'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.end_to_end_test.result }}' === 'success' ? ':heavy-check-mark:   E2E Tests' : '${{ needs.end_to_end_test.result }}' === 'failure' ? ':heavy-cross-mark:   E2E Tests' : ':heavy-minus-sign:   E2E Tests'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.deploy_gatsby.result }}' === 'success' ? ':heavy-check-mark:   Build &amp; Deploy Gatsby App' : '${{ needs.deploy_gatsby.result }}' === 'failure' ? ':heavy-cross-mark:   Build &amp; Deploy Gatsby App' : ':heavy-minus-sign:   Build &amp; Deploy Gatsby App'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ needs.publish_results.result }}' === 'success' ? ':heavy-check-mark:   Publish Results to PR' : '${{ needs.publish_results.result }}' === 'failure' ? ':heavy-cross-mark:   Publish Results to PR' : ':heavy-minus-sign:   Publish Results to PR'
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": '${{ job.status }}' === 'success' ? ':heavy-check-mark:   Post to Slack' : '${{ job.status }}' === 'failure' ? ':heavy-cross-mark:   Post to Slack' : ':heavy-minus-sign:   Post to Slack'
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Useful links for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":hammer_and_wrench:   Workflow run for this deployment"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Workflow run",
                        "emoji": true
                      },
                      "value": "Link to this run instance",
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":page_facing_up:   Cypress Coverage report"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Cypress coverage report",
                        "emoji": true
                      },
                      "value": "Link to Cypress report",
                      "url": '${{ needs.end_to_end_test.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}cypress/index.html' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":page_facing_up:   Jest Coverage report"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Jest coverage report",
                        "emoji": true
                      },
                      "value": "Link to Jest coverage report",
                      "url": '${{ needs.unit_test.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}coverage/lcov-report/index.html' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":page_facing_up:   Jest test report"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Jest test report",
                        "emoji": true
                      },
                      "value": "Link to Jest test report",
                      "url": '${{ needs.unit_test.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}jesttestreport/index.html' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":page_facing_up:   ESlint report"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "eslint report",
                        "emoji": true
                      },
                      "value": "Link to ESlint report",
                      "url": '${{ needs.linting.result }}' === 'success' && '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}eslint/index.html' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*Storybook and Website links for this workflow run.*"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":jigsaw:   Storybook"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View storybook",
                        "emoji": true
                      },
                      "value": "Link to Storybook website",
                      "url": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_storybook.outputs.url }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":globe_with_meridians:   Digital-Hybrid website"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View website",
                        "emoji": true
                      },
                      "value": "Link to DH website",
                      "url": '${{ needs.deploy_pr_terraform.result }}' === 'success' ? '${{ needs.deploy_gatsby.outputs.url }}' : 'https://www.google.com/404.html',
                      "action_id": "button-action"
                    }
                  },
                  {
                    "type": "divider"
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": ":airplane_arriving: *<!date^${{ steps.get-current-timestamp.outputs.current-timestamp }}^Posted on {date_long} at {time_secs}|Date and Time of this message when it was posted.>*"
                      }
                    ]
                  }
                ]
              }]
            }
