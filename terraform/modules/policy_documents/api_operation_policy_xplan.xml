<policies>
    <inbound>
        <base />
         <!-- check Authorization header for access token-->
        <check-header name="Authorization" failed-check-httpcode="401" failed-check-error-message="Not authorized - missing bearer token" ignore-case="false" />
        <cache-lookup-value key="cached-myaccount-signing-key" variable-name="myaccount-signing-key" />
        <cache-lookup-value key="cached-xplan-username" variable-name="xplan-username" />
        <cache-lookup-value key="cached-xplan-password" variable-name="xplan-password" />
        <wait for="all">
        <choose>
            <when condition="@(!context.Variables.ContainsKey("myaccount-signing-key"))">
                <!-- call  Key Vault  and retrieve secret-->
                <send-request mode="new" response-variable-name="myaccount-signing-key-json" timeout="20" ignore-error="false">
                    <set-url>{{keyvault-baseurl}}secrets/myaccount-signing-key/?api-version=7.0</set-url>
                    <set-method>GET</set-method>
                    <authentication-managed-identity resource="https://vault.azure.net" />
                </send-request>
                <set-variable name="myaccount-signing-key" value="@{
                    var signingKey=new JObject(((IResponse)context.Variables["myaccount-signing-key-json"]).Body.As<JObject>())["value"].ToString();
                    var signingKeyBase64=Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(signingKey));
                    return signingKeyBase64;
                }" />
                <!-- Store result in cache -->
                <cache-store-value key="cached-myaccount-signing-key" value="@(context.Variables.GetValueOrDefault<string>("myaccount-signing-key"))" duration="{{keyvault-secret-cache-duration}}" />
                    <trace source="Inbount/secrets/myaccount-signing-key" severity="information">
                        <message>Received Myaccount signing key from keyvault</message>
                </trace>                
            </when>
        </choose>
        <choose>
            <when condition="@(!context.Variables.ContainsKey("xplan-username"))">
                <!-- call  Key Vault  and retrieve username-->
                <send-request mode="new" response-variable-name="xplan-username-json" timeout="20" ignore-error="false">
                    <set-url>{{keyvault-baseurl}}secrets/xplan-username/?api-version=7.0</set-url>
                    <set-method>GET</set-method>
                    <authentication-managed-identity resource="https://vault.azure.net" />
                </send-request>
                <set-variable name="xplan-username" value="@{
                    return new JObject(((IResponse)context.Variables["xplan-username-json"]).Body.As<JObject>())["value"].ToString();
                }" />
                <!-- Store result in cache -->
                <cache-store-value key="cached-xplan-username" value="@(context.Variables.GetValueOrDefault<string>("xplan-username"))" duration="{{keyvault-secret-cache-duration}}" />
                <trace source="Inbount/secrets/xplan-username" severity="information">
                        <message>Received xplan-username from keyvault</message>
                </trace>                
            </when>
        </choose>
        <choose>
            <when condition="@(!context.Variables.ContainsKey("xplan-password"))">
                <!-- call  Key Vault  and retrieve password-->
                <send-request mode="new" response-variable-name="xplan-password-json" timeout="20" ignore-error="false">
                    <set-url>{{keyvault-baseurl}}secrets/xplan-password/?api-version=7.0</set-url>
                    <set-method>GET</set-method>
                    <authentication-managed-identity resource="https://vault.azure.net" />
                </send-request>
                <set-variable name="xplan-password" value="@{
                    return new JObject(((IResponse)context.Variables["xplan-password-json"]).Body.As<JObject>())["value"].ToString();
                }" />
                <!-- Store result in cache -->
                <cache-store-value key="cached-xplan-password" value="@(context.Variables.GetValueOrDefault<string>("xplan-password"))" duration="{{keyvault-secret-cache-duration}}" />
                <trace source="Inbount/secrets/xplan-password" severity="information">
                        <message>Received xplan-password from keyvault</message>
                </trace>
            </when>
        </choose>
        </wait>
        <!-- validate JWT -->
        <validate-jwt header-name="Authorization" failed-validation-error-message="Token validation failed" require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true" clock-skew="300" output-token-variable-name="authorizationJwt">
            <issuer-signing-keys>
                <key>@{
                 return context.Variables.GetValueOrDefault<string>("myaccount-signing-key");
            }</key>
            </issuer-signing-keys>
            <audiences>
                <audience>myaccountsapi.bestinvest.co.uk</audience>
            </audiences>
            <issuers>
                <issuer>identityapi.bestinvest.co.uk</issuer>
            </issuers>
            <required-claims>
                <claim name="xplan_id" match="all" />
            </required-claims>
        </validate-jwt>
        %{ if config.backend_url != ""}
        <set-backend-service base-url="${config.backend_url}" />
        %{ endif ~}        
        <cors allow-credentials="${config.allow-credentials}">

            %{ if config.cors_allowed_origins != null }
                <allowed-origins>
                %{ for origin in config.cors_allowed_origins }
                    <origin>${ origin }</origin>
                %{ endfor ~}
                </allowed-origins>
            %{ endif ~}

            %{ if config.cors_allowed_method != null }
                <allowed-methods>
                    <method>${ config.cors_allowed_method }</method>
                </allowed-methods>
            %{ endif ~}

            %{ if config.cors_allowed_headers != null }
                <allowed-headers>
                %{ for header in config.cors_allowed_headers }
                    <header>${ header }</header>
                %{ endfor ~}
                </allowed-headers>
            %{ endif ~}

            %{ if config.cors_exposed_headers != null }
                <expose-headers>
                    <header>${ config.cors_exposed_headers }</header>
                </expose-headers>
            %{ endif ~}

            </cors>

            %{ if config.headers != null}
            %{ for header in config.headers  }
                <set-header name="${header.name}" exists-action="${header.exists_action}">
                  %{ if header.exists_action != "delete" }
                    <value>${ header.value }</value>
                  %{ endif ~}
                </set-header>
            %{ endfor ~}
            %{ endif ~}

            %{ if config.variables != null}
            %{ for variable in config.variables  }
                <set-variable name="${variable.name}" value="${variable.value}" />
            %{ endfor ~}
            %{ endif ~}

        %{ if config.rewrite_url != null && config.rewrite_url != ""}
                <rewrite-uri template="${ config.rewrite_url }"/>
           %{ endif ~}
        <authentication-basic username ="@{
             return context.Variables.GetValueOrDefault<string>("xplan-username");
          }" password="@{
                 return context.Variables.GetValueOrDefault<string>("xplan-password");
          }" />
    </inbound>
    <backend>
        <base />
    </backend>
   <outbound>
    %{ if config.outbound_headers != null}
      %{ for outbound_header in config.outbound_headers  }
      <set-header name="${outbound_header.name}" exists-action="${outbound_header.exists_action}">
      %{ if outbound_header.exists_action != "delete" }
        <value>${ outbound_header.value }</value>
      %{ endif ~}  
      </set-header>
      %{ endfor ~}
    %{ endif ~}  
    <base />
  </outbound>
    <on-error>
        <base />
        <set-header name="ErrorSource" exists-action="override">
            <value>@(context.LastError.Source)</value>
        </set-header>
        <set-header name="ErrorMessage" exists-action="override">
            <value>@(context.LastError.Message)</value>
        </set-header>
    </on-error>
</policies>